/**
 * –ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç–µ–ª—å —Å–ª–µ–¥—É—é—â–∏—Ö —à–∞–≥–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –∏ –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç –≤–µ—Ä–æ—è—Ç–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */

const SmartLogger = {
  predictor: (message, data) => {
    const timestamp = new Date().toISOString();
    console.log(`üîÆ [${timestamp}] PREDICTOR: ${message}`, data ? JSON.stringify(data, null, 2) : '');
  }
};

/**
 * –ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Å–ª–µ–¥—É—é—â–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
 */
class ProjectPredictor {
  constructor() {
    this.initializePredictionRules();
  }

  initializePredictionRules() {
    // –ü—Ä–∞–≤–∏–ª–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –ø—Ä–æ–µ–∫—Ç–∞ –∏ —Ç–µ–∫—É—â–∏—Ö –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
    this.predictionRules = {
      logo: {
        after_image_creation: [
          {
            action: 'vectorize',
            description: '–í–µ–∫—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å –ª–æ–≥–æ—Ç–∏–ø –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è',
            probability: 0.85,
            keywords: ['svg', '–≤–µ–∫—Ç–æ—Ä', '–º–∞—Å—à—Ç–∞–±', '–ø–µ—á–∞—Ç—å'],
            benefits: '–ü–æ–∑–≤–æ–ª–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–æ–≥–æ—Ç–∏–ø –≤ –ª—é–±–æ–º —Ä–∞–∑–º–µ—Ä–µ –±–µ–∑ –ø–æ—Ç–µ—Ä–∏ –∫–∞—á–µ—Å—Ç–≤–∞'
          },
          {
            action: 'create_monochrome_version',
            description: '–°–æ–∑–¥–∞—Ç—å –º–æ–Ω–æ—Ö—Ä–æ–º–Ω—É—é –≤–µ—Ä—Å–∏—é –ª–æ–≥–æ—Ç–∏–ø–∞',
            probability: 0.70,
            keywords: ['—á–µ—Ä–Ω–æ-–±–µ–ª—ã–π', '–æ–¥–Ω–æ—Ü–≤–µ—Ç–Ω—ã–π', '–º–æ–Ω–æ—Ö—Ä–æ–º'],
            benefits: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è —Ñ–∞–∫—Å–æ–≤, —à—Ç–∞–º–ø–æ–≤ –∏ —ç–∫–æ–Ω–æ–º–∏—á–Ω–æ–π –ø–µ—á–∞—Ç–∏'
          },
          {
            action: 'color_variations',
            description: '–°–æ–∑–¥–∞—Ç—å —Ü–≤–µ—Ç–æ–≤—ã–µ –≤–∞—Ä–∏–∞—Ü–∏–∏ –ª–æ–≥–æ—Ç–∏–ø–∞',
            probability: 0.65,
            keywords: ['—Ü–≤–µ—Ç–∞', '–≤–∞—Ä–∏–∞–Ω—Ç—ã', '–ø–∞–ª–∏—Ç—Ä–∞'],
            benefits: '–î–∞—Å—Ç –±–æ–ª—å—à–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–∞–∑–Ω—ã—Ö –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞—Ö'
          }
        ],
        after_vectorization: [
          {
            action: 'business_card_design',
            description: '–°–æ–∑–¥–∞—Ç—å –¥–∏–∑–∞–π–Ω –≤–∏–∑–∏—Ç–∫–∏ —Å –ª–æ–≥–æ—Ç–∏–ø–æ–º',
            probability: 0.75,
            keywords: ['–≤–∏–∑–∏—Ç–∫–∞', '–∫–æ–Ω—Ç–∞–∫—Ç—ã', '–∫–∞—Ä—Ç–æ—á–∫–∞'],
            benefits: '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç —Ä–∞–∑–≤–∏—Ç–∏–µ —Ñ–∏—Ä–º–µ–Ω–Ω–æ–≥–æ —Å—Ç–∏–ª—è'
          },
          {
            action: 'letterhead_design',
            description: '–°–æ–∑–¥–∞—Ç—å —Ñ–∏—Ä–º–µ–Ω–Ω—ã–π –±–ª–∞–Ω–∫',
            probability: 0.60,
            keywords: ['–±–ª–∞–Ω–∫', '–¥–æ–∫—É–º–µ–Ω—Ç—ã', '–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π'],
            benefits: '–ü—Ä–∏–¥–∞—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –≤–∏–¥'
          }
        ]
      },

      print: {
        after_image_creation: [
          {
            action: 'optimize_for_fabric',
            description: '–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è –ø–µ—á–∞—Ç–∏ –Ω–∞ —Ç–∫–∞–Ω–∏',
            probability: 0.80,
            keywords: ['—Ç–∫–∞–Ω—å', '—Ñ—É—Ç–±–æ–ª–∫–∞', '—Ç–µ–∫—Å—Ç–∏–ª—å'],
            benefits: '–£–ª—É—á—à–∏—Ç –∫–∞—á–µ—Å—Ç–≤–æ –ø–µ—á–∞—Ç–∏ –∏ —Å—Ç–æ–π–∫–æ—Å—Ç—å –∫ —Å—Ç–∏—Ä–∫–µ'
          },
          {
            action: 'size_variations',
            description: '–°–æ–∑–¥–∞—Ç—å –≤–µ—Ä—Å–∏–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤',
            probability: 0.75,
            keywords: ['—Ä–∞–∑–º–µ—Ä—ã', 'S M L XL', '–º–∞—Å—à—Ç–∞–±'],
            benefits: '–ü–æ–∑–≤–æ–ª–∏—Ç –ø–µ—á–∞—Ç–∞—Ç—å –Ω–∞ –æ–¥–µ–∂–¥–µ –≤—Å–µ—Ö —Ä–∞–∑–º–µ—Ä–æ–≤'
          },
          {
            action: 'color_adjustment',
            description: '–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ü–≤–µ—Ç–∞ –¥–ª—è CMYK –ø–µ—á–∞—Ç–∏',
            probability: 0.70,
            keywords: ['–ø–µ—á–∞—Ç—å', 'CMYK', '—Ü–≤–µ—Ç–æ–∫–æ—Ä—Ä–µ–∫—Ü–∏—è'],
            benefits: '–û–±–µ—Å–ø–µ—á–∏—Ç —Ç–æ—á–Ω—É—é –ø–µ—Ä–µ–¥–∞—á—É —Ü–≤–µ—Ç–æ–≤ –ø—Ä–∏ –ø–µ—á–∞—Ç–∏'
          }
        ],
        after_optimization: [
          {
            action: 'mockup_creation',
            description: '–°–æ–∑–¥–∞—Ç—å –º–æ–∫–∞–ø –Ω–∞ —Ñ—É—Ç–±–æ–ª–∫–µ',
            probability: 0.85,
            keywords: ['–º–æ–∫–∞–ø', '–ø—Ä–∏–º–µ—Ä–∫–∞', '–≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è'],
            benefits: '–ü–æ–∫–∞–∂–µ—Ç, –∫–∞–∫ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å –≥–æ—Ç–æ–≤–æ–µ –∏–∑–¥–µ–ª–∏–µ'
          }
        ]
      },

      character: {
        after_image_creation: [
          {
            action: 'emotion_variations',
            description: '–°–æ–∑–¥–∞—Ç—å –≤–µ—Ä—Å–∏–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ —ç–º–æ—Ü–∏—è–º–∏',
            probability: 0.80,
            keywords: ['—ç–º–æ—Ü–∏–∏', '–≤—ã—Ä–∞–∂–µ–Ω–∏—è', '–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ'],
            benefits: '–î–∞—Å—Ç –±–æ–ª—å—à–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞'
          },
          {
            action: 'pose_variations',
            description: '–°–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ —Ä–∞–∑–Ω—ã—Ö –ø–æ–∑–∞—Ö',
            probability: 0.75,
            keywords: ['–ø–æ–∑—ã', '–¥–≤–∏–∂–µ–Ω–∏—è', '–¥–µ–π—Å—Ç–≤–∏—è'],
            benefits: '–°–¥–µ–ª–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –±–æ–ª–µ–µ –∂–∏–≤—ã–º –∏ versatile'
          },
          {
            action: 'sticker_version',
            description: '–ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è —Å—Ç–∏–∫–µ—Ä–æ–≤',
            probability: 0.65,
            keywords: ['—Å—Ç–∏–∫–µ—Ä—ã', '–º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä', 'telegram'],
            benefits: '–ü–æ–ø—É–ª—è—Ä–Ω—ã–π —Å–ø–æ—Å–æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π'
          }
        ]
      },

      embroidery: {
        after_image_creation: [
          {
            action: 'simplify_details',
            description: '–£–ø—Ä–æ—Å—Ç–∏—Ç—å –º–µ–ª–∫–∏–µ –¥–µ—Ç–∞–ª–∏ –¥–ª—è –≤—ã—à–∏–≤–∫–∏',
            probability: 0.90,
            keywords: ['—É–ø—Ä–æ—Å—Ç–∏—Ç—å', '–¥–µ—Ç–∞–ª–∏', '–≤—ã—à–∏–≤–∫–∞'],
            benefits: '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –≤—ã—à–∏–≤–∫–∏'
          },
          {
            action: 'reduce_colors',
            description: '–°–æ–∫—Ä–∞—Ç–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–≤–µ—Ç–æ–≤ –¥–æ 8-12',
            probability: 0.85,
            keywords: ['—Ü–≤–µ—Ç–∞', '–Ω–∏—Ç–∫–∏', '–ø–∞–ª–∏—Ç—Ä–∞'],
            benefits: '–°–Ω–∏–∑–∏—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏ –≤—Ä–µ–º—è –≤—ã—à–∏–≤–∫–∏'
          },
          {
            action: 'convert_to_dst',
            description: '–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç –≤—ã—à–∏–≤–∫–∏ DST',
            probability: 0.95,
            keywords: ['DST', '—Ñ–æ—Ä–º–∞—Ç', '–º–∞—à–∏–Ω–∞'],
            benefits: '–ì–æ—Ç–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è –≤—ã—à–∏–≤–∞–ª—å–Ω–æ–π –º–∞—à–∏–Ω—ã'
          }
        ],
        after_simplification: [
          {
            action: 'thread_mapping',
            description: '–ü–æ–¥–æ–±—Ä–∞—Ç—å –Ω–∏—Ç–∫–∏ –∏ —Å–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç—É —Ü–≤–µ—Ç–æ–≤',
            probability: 0.80,
            keywords: ['–Ω–∏—Ç–∫–∏', '—Ü–≤–µ—Ç–∞', '–∫–∞—Ä—Ç–∞'],
            benefits: '–ü–æ–º–æ–∂–µ—Ç –≤—ã—à–∏–≤–∞–ª—å—â–∏–∫—É –ø–æ–¥–æ–±—Ä–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –Ω–∏—Ç–∫–∏'
          }
        ]
      },

      general: {
        after_image_creation: [
          {
            action: 'determine_usage',
            description: '–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
            probability: 0.60,
            keywords: ['–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ', '–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ', '—Ü–µ–ª—å'],
            benefits: '–ü–æ–º–æ–∂–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏'
          },
          {
            action: 'quality_enhancement',
            description: '–£–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
            probability: 0.50,
            keywords: ['–∫–∞—á–µ—Å—Ç–≤–æ', '—É–ª—É—á—à–∏—Ç—å', '—á–µ—Ç–∫–æ—Å—Ç—å'],
            benefits: '–ü–æ–≤—ã—Å–∏—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞'
          }
        ]
      }
    };

    // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è
    this.behaviorPatterns = {
      perfectionist: {
        indicators: ['–∏–∑–º–µ–Ω–∏', '—É–ª—É—á—à–∏', '–µ—â–µ —Ä–∞–∑', '–ø–æ-–¥—Ä—É–≥–æ–º—É', '–ª—É—á—à–µ'],
        predictions: [
          '–í–µ—Ä–æ—è—Ç–Ω—ã –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏—Ç–µ—Ä–∞—Ü–∏–∏',
          '–í–Ω–∏–º–∞–Ω–∏–µ –∫ –¥–µ—Ç–∞–ª—è–º',
          '–ó–∞–ø—Ä–æ—Å—ã –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É'
        ]
      },
      efficient: {
        indicators: ['–±—ã—Å—Ç—Ä–æ', '—Å—Ä–∞–∑—É', '–≥–æ—Ç–æ–≤–æ', '–ø–æ–π–¥–µ—Ç', '–Ω–æ—Ä–º–∞–ª—å–Ω–æ'],
        predictions: [
          '–ú–∏–Ω–∏–º—É–º –¥–æ—Ä–∞–±–æ—Ç–æ–∫',
          '–§–æ–∫—É—Å –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ',
          '–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–¥–∞—á–∞–º'
        ]
      },
      explorer: {
        indicators: ['–ø–æ–ø—Ä–æ–±—É–π', '–∞ —á—Ç–æ –µ—Å–ª–∏', '–≤–∞—Ä–∏–∞–Ω—Ç—ã', '—ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã'],
        predictions: [
          '–ò–Ω—Ç–µ—Ä–µ—Å –∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞–º',
          '–¢–≤–æ—Ä—á–µ—Å–∫–∏–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã',
          '–ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è'
        ]
      }
    };

    // –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    this.temporalPatterns = {
      immediate_next: 0.8,    // –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å, —á—Ç–æ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –≤ —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏
      session_end: 0.6,      // –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≤–µ—Ä—à–∏—Ç –Ω–∞ —ç—Ç–æ–º
      return_later: 0.4      // –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–µ—Ä–Ω–µ—Ç—Å—è –ø–æ–∑–∂–µ
    };
  }

  /**
   * –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –ø—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ (–§–∞–∑–∞ 2)
   */
  predictNextSteps(project, context = {}) {
    const predictions = [];

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    const temporalAnalysis = this.analyzeTemporalPatterns(project);

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userPatterns = this.analyzeUserBehaviorPatterns(context);

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã
    const contextualFactors = this.analyzeContextualFactors(context);

    if (!project.artifacts || project.artifacts.length === 0) {
      // –ù–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç - –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ —à–∞–≥–∏
      predictions.push({
        action: 'create_initial_design',
        probability: 0.8,
        description: '–°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –¥–∏–∑–∞–π–Ω–∞',
        reasoning: '–ü—Ä–æ–µ–∫—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤',
        confidence: 0.9,
        timeframe: 'immediate',
        dependencies: [],
        impact: 'high'
      });
    }

    return predictions;
  }

  /**
   * –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ —Å —Ç–∏–ø–æ–º –≤ –ø—Ä–∞–≤–∏–ª–∞—Ö
   */
  mapConceptToType(concept) {
    const mapping = {
      '–ª–æ–≥–æ—Ç–∏–ø': 'logo',
      'logo': 'logo',
      '–ø—Ä–∏–Ω—Ç': 'print', 
      'print': 'print',
      '–ø–µ—Ä—Å–æ–Ω–∞–∂': 'character',
      'character': 'character',
      '–≤—ã—à–∏–≤–∫–∞': 'embroidery',
      'embroidery': 'embroidery'
    };

    return mapping[concept] || 'general';
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
   */
  analyzeProjectState(project) {
    const state = {
      has_images: project.artifacts.filter(a => a.type === 'image').length > 0,
      has_vectors: project.artifacts.filter(a => a.type === 'vector').length > 0,
      has_embroidery: project.artifacts.filter(a => a.type === 'embroidery').length > 0,
      artifacts_count: project.artifacts.length,
      latest_artifact: project.artifacts.length > 0 ? 
        project.artifacts[project.artifacts.length - 1] : null,
      project_age_hours: (Date.now() - project.createdAt) / (1000 * 60 * 60),
      last_update_hours: (Date.now() - project.updatedAt) / (1000 * 60 * 60)
    };

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∞–∑—É –ø—Ä–æ–µ–∫—Ç–∞
    if (state.artifacts_count === 0) {
      state.phase = 'initial';
    } else if (state.artifacts_count === 1 && state.has_images) {
      state.phase = 'after_image_creation';
    } else if (state.has_vectors) {
      state.phase = 'after_vectorization';
    } else if (state.artifacts_count > 2) {
      state.phase = 'mature';
    } else {
      state.phase = 'development';
    }

    return state;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–º–µ–Ω–∏–º—ã—Ö –ø—Ä–∞–≤–∏–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
   */
  getApplicableRules(rules, projectState) {
    const phase = projectState.phase;
    let applicableRules = [];

    // –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Ñ–∞–∑—ã
    if (rules[phase]) {
      applicableRules = [...rules[phase]];
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞
    if (rules.always) {
      applicableRules.push(...rules.always);
    }

    // –§–∏–ª—å—Ç—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
    applicableRules = applicableRules.filter(rule => {
      return !this.isActionAlreadyDone(rule.action, projectState);
    });

    return applicableRules;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞, –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –ª–∏ —É–∂–µ –¥–µ–π—Å—Ç–≤–∏–µ
   */
  isActionAlreadyDone(action, projectState) {
    const actionChecks = {
      'vectorize': () => projectState.has_vectors,
      'convert_to_dst': () => projectState.has_embroidery,
      'simplify_details': () => projectState.latest_artifact?.description?.includes('—É–ø—Ä–æ—â–µ–Ω'),
      'reduce_colors': () => projectState.latest_artifact?.description?.includes('—Ü–≤–µ—Ç–∞ —Å–æ–∫—Ä–∞—â–µ–Ω—ã')
    };

    const check = actionChecks[action];
    return check ? check() : false;
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
   */
  createPrediction(rule, project, context) {
    // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    let adjustedProbability = rule.probability;

    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å, –µ—Å–ª–∏ –µ—Å—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –≤ –Ω–µ–¥–∞–≤–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
    if (context.recentQueries) {
      const recentText = context.recentQueries.join(' ').toLowerCase();
      const keywordMatches = rule.keywords.filter(keyword => 
        recentText.includes(keyword)
      ).length;

      if (keywordMatches > 0) {
        adjustedProbability += keywordMatches * 0.1;
      }
    }

    // –°–Ω–∏–∂–∞–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
    const projectAgeHours = (Date.now() - project.updatedAt) / (1000 * 60 * 60);
    if (projectAgeHours > 24) {
      adjustedProbability *= 0.7;
    } else if (projectAgeHours > 2) {
      adjustedProbability *= 0.9;
    }

    // –°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
    return {
      action: rule.action,
      description: rule.description,
      probability: Math.min(adjustedProbability, 0.95),
      benefits: rule.benefits,
      keywords: rule.keywords,
      project_id: project.id,
      confidence: this.calculatePredictionConfidence(rule, project, context),
      suggested_prompts: this.generateSuggestedPrompts(rule, project)
    };
  }

  /**
   * –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
   */
  predictBasedOnBehavior(project, context) {
    const predictions = [];

    if (!context.userBehaviorHistory) {
      return predictions;
    }

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω –ø–æ–≤–µ–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userPattern = this.identifyUserPattern(context.userBehaviorHistory);

    if (userPattern === 'perfectionist') {
      predictions.push({
        action: 'request_modifications',
        description: '–í–µ—Ä–æ—è—Ç–Ω—ã –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É –∏ —É–ª—É—á—à–µ–Ω–∏—è',
        probability: 0.75,
        type: 'behavioral',
        confidence: 0.7
      });
    } else if (userPattern === 'explorer') {
      predictions.push({
        action: 'try_variations',
        description: '–ò–Ω—Ç–µ—Ä–µ—Å –∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º –≤–∞—Ä–∏–∞–Ω—Ç–∞–º –∏ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–º',
        probability: 0.70,
        type: 'behavioral',  
        confidence: 0.65
      });
    }

    return predictions;
  }

  /**
   * –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –ø–æ–≤–µ–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  identifyUserPattern(behaviorHistory) {
    const patterns = Object.keys(this.behaviorPatterns);
    const scores = {};

    patterns.forEach(pattern => {
      scores[pattern] = 0;
      const indicators = this.behaviorPatterns[pattern].indicators;

      behaviorHistory.forEach(entry => {
        const text = entry.toLowerCase();
        indicators.forEach(indicator => {
          if (text.includes(indicator)) {
            scores[pattern]++;
          }
        });
      });
    });

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω —Å –Ω–∞–∏–≤—ã—Å—à–∏–º —Å—á–µ—Ç–æ–º
    const maxScore = Math.max(...Object.values(scores));
    if (maxScore === 0) return null;

    return Object.keys(scores).find(pattern => scores[pattern] === maxScore);
  }

  /**
   * –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–∏
   */
  calculatePredictionConfidence(rule, project, context) {
    let confidence = rule.probability;

    // –§–∞–∫—Ç–æ—Ä: –≤–æ–∑—Ä–∞—Å—Ç –ø—Ä–æ–µ–∫—Ç–∞
    const projectAgeHours = (Date.now() - project.createdAt) / (1000 * 60 * 60);
    if (projectAgeHours < 1) {
      confidence += 0.1; // –ù–æ–≤—ã–µ –ø—Ä–æ–µ–∫—Ç—ã –±–æ–ª–µ–µ –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º—ã
    }

    // –§–∞–∫—Ç–æ—Ä: –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –ø—Ä–æ–µ–∫—Ç–µ
    if (project.artifacts.length > 0) {
      confidence += 0.05;
    }

    // –§–∞–∫—Ç–æ—Ä: –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    if (context.recentQueries && context.recentQueries.length > 0) {
      confidence += 0.05;
    }

    return Math.min(confidence, 0.95);
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤
   */
  generateSuggestedPrompts(rule, project) {
    const prompts = [];
    const projectTitle = project.title.toLowerCase();

    switch (rule.action) {
      case 'vectorize':
        prompts.push(
          `–í–µ–∫—Ç–æ—Ä–∏–∑—É–π ${projectTitle}`,
          `–°–¥–µ–ª–∞–π SVG –≤–µ—Ä—Å–∏—é ${projectTitle}`,
          `–ü—Ä–µ–æ–±—Ä–∞–∑—É–π –≤ –≤–µ–∫—Ç–æ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç`
        );
        break;

      case 'optimize_for_fabric':
        prompts.push(
          `–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π ${projectTitle} –¥–ª—è –ø–µ—á–∞—Ç–∏ –Ω–∞ —Ç–∫–∞–Ω–∏`,
          `–ê–¥–∞–ø—Ç–∏—Ä—É–π –¥–ª—è —Ñ—É—Ç–±–æ–ª–∫–∏`,
          `–ü–æ–¥–≥–æ—Ç–æ–≤—å –¥–ª—è —Ç–µ–∫—Å—Ç–∏–ª—å–Ω–æ–π –ø–µ—á–∞—Ç–∏`
        );
        break;

      case 'convert_to_dst':
        prompts.push(
          `–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–π ${projectTitle} –≤ —Ñ–æ—Ä–º–∞—Ç –≤—ã—à–∏–≤–∫–∏`,
          `–°–¥–µ–ª–∞–π DST —Ñ–∞–π–ª`,
          `–ü–æ–¥–≥–æ—Ç–æ–≤—å –¥–ª—è –≤—ã—à–∏–≤–∞–ª—å–Ω–æ–π –º–∞—à–∏–Ω—ã`
        );
        break;

      case 'emotion_variations':
        prompts.push(
          `–°–¥–µ–ª–∞–π ${projectTitle} –≤–µ—Å–µ–ª—ã–º`,
          `–°–æ–∑–¥–∞–π –≥—Ä—É—Å—Ç–Ω—É—é –≤–µ—Ä—Å–∏—é`,
          `–ü–æ–∫–∞–∂–∏ —Ä–∞–∑–Ω—ã–µ —ç–º–æ—Ü–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞`
        );
        break;

      default:
        prompts.push(
          `${rule.description.toLowerCase()}`,
          `–î–æ—Ä–∞–±–æ—Ç–∞–π ${projectTitle}`,
          `–£–ª—É—á—à–∏ –ø—Ä–æ–µ–∫—Ç`
        );
    }

    return prompts.slice(0, 3);
  }

  /**
   * –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã—Ö —Ü–µ–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞
   */
  predictLongTermGoals(project) {
    const longTermGoals = [];
    const projectType = this.mapConceptToType(project.concept);

    const goalMappings = {
      logo: [
        '–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Ñ–∏—Ä–º–µ–Ω–Ω–æ–≥–æ —Å—Ç–∏–ª—è',
        '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –±—Ä–µ–Ω–¥–±—É–∫–∞',
        '–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–∞ –≤—Å–µ—Ö –Ω–æ—Å–∏—Ç–µ–ª—è—Ö'
      ],
      print: [
        '–ó–∞–ø—É—Å–∫ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –ø—Ä–∏–Ω—Ç–æ–≤',
        '–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –¥–∏–∑–∞–π–Ω–æ–≤',
        '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥ –∏ –ø—Ä–æ–¥–∞–∂–∏'
      ],
      character: [
        '–†–∞–∑–≤–∏—Ç–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ —Å–µ—Ä–∏—é',
        '–°–æ–∑–¥–∞–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞',
        '–ö–æ–º–º–µ—Ä—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞'
      ],
      embroidery: [
        '–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –≤—ã—à–∏—Ç—ã—Ö –∏–∑–¥–µ–ª–∏–π',
        '–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞ –¥–∏–∑–∞–π–Ω–æ–≤',
        '–ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞'
      ]
    };

    const goals = goalMappings[projectType] || [];
    goals.forEach((goal, index) => {
      longTermGoals.push({
        goal,
        probability: 0.6 - (index * 0.1),
        timeframe: `${(index + 1) * 2}-${(index + 1) * 4} –Ω–µ–¥–µ–ª–∏`
      });
    });

    return longTermGoals;
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
   */
  analyzeUsageTrends(project, context) {
    const trends = {
      increasing_complexity: false,
      focus_shift: null,
      user_satisfaction: 'unknown'
    };

    if (project.artifacts.length > 1) {
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
      const complexityTrend = this.analyzeComplexityTrend(project.artifacts);
      trends.increasing_complexity = complexityTrend > 0;

      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–º–µ—â–µ–Ω–∏–µ —Ñ–æ–∫—É—Å–∞
      trends.focus_shift = this.analyzeFocusShift(project.artifacts);
    }

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
    if (context.recentQueries) {
      trends.user_satisfaction = this.analyzeSatisfaction(context.recentQueries);
    }

    return trends;
  }

  analyzeComplexityTrend(artifacts) {
    // –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ –¥–ª–∏–Ω–µ –æ–ø–∏—Å–∞–Ω–∏–π
    if (artifacts.length < 2) return 0;

    const firstHalf = artifacts.slice(0, Math.floor(artifacts.length / 2));
    const secondHalf = artifacts.slice(Math.floor(artifacts.length / 2));

    const avgComplexityFirst = firstHalf.reduce((sum, a) => 
      sum + (a.description?.length || 0), 0) / firstHalf.length;

    const avgComplexitySecond = secondHalf.reduce((sum, a) => 
      sum + (a.description?.length || 0), 0) / secondHalf.length;

    return avgComplexitySecond - avgComplexityFirst;
  }

  analyzeFocusShift(artifacts) {
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
    const types = artifacts.map(a => a.type);
    const uniqueTypes = [...new Set(types)];

    if (uniqueTypes.length === 1) return null;

    const recentTypes = types.slice(-2);
    const earlierTypes = types.slice(0, -2);

    if (recentTypes.every(type => !earlierTypes.includes(type))) {
      return 'shift_to_new_format';
    }

    return null;
  }

  analyzeSatisfaction(recentQueries) {
    const satisfiedKeywords = ['–æ—Ç–ª–∏—á–Ω–æ', '—Ö–æ—Ä–æ—à–æ', '–ø–æ–¥—Ö–æ–¥–∏—Ç', '–Ω—Ä–∞–≤–∏—Ç—Å—è', '—Å—É–ø–µ—Ä'];
    const dissatisfiedKeywords = ['–Ω–µ —Ç–æ', '–ø–ª–æ—Ö–æ', '–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è', '–ø–µ—Ä–µ–¥–µ–ª–∞–π', '–ø–æ-–¥—Ä—É–≥–æ–º—É'];

    const text = recentQueries.join(' ').toLowerCase();

    const satisfiedCount = satisfiedKeywords.filter(word => text.includes(word)).length;
    const dissatisfiedCount = dissatisfiedKeywords.filter(word => text.includes(word)).length;

    if (satisfiedCount > dissatisfiedCount) return 'satisfied';
    if (dissatisfiedCount > satisfiedCount) return 'dissatisfied';
    return 'neutral';
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
   */
  analyzeTemporalPatterns(project) {
    // –ü—Ä–∏–º–µ—Ä: –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–∏ –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏
    const timeBetweenActions = project.artifacts.length > 1 ?
      (project.artifacts[project.artifacts.length - 1].createdAt - project.artifacts[project.artifacts.length - 2].createdAt) : 0;

    return {
      timeBetweenActions,
      projectAge: Date.now() - project.createdAt
    };
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –ø–æ–≤–µ–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  analyzeUserBehaviorPatterns(context) {
    // –ü—Ä–∏–º–µ—Ä: –ê–Ω–∞–ª–∏–∑ —á–∞—Å—Ç–æ—Ç—ã –ø—Ä–∞–≤–æ–∫
    return {
      editsCount: context.userBehaviorHistory ? context.userBehaviorHistory.length : 0
    };
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤
   */
  analyzeContextualFactors(context) {
    // –ü—Ä–∏–º–µ—Ä: –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫
    const currentHour = new Date().getHours();

    return {
      currentHour
    };
  }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
const projectPredictor = new ProjectPredictor();

module.exports = {
  predictNextSteps: projectPredictor.predictNextSteps.bind(projectPredictor),
  predictLongTermGoals: projectPredictor.predictLongTermGoals.bind(projectPredictor),
  analyzeUsageTrends: projectPredictor.analyzeUsageTrends.bind(projectPredictor),

  // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
  ProjectPredictor
};