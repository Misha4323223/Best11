/**
 * –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∑–∞–ø—Ä–æ—Å–æ–≤
 * –ü–æ–Ω–∏–º–∞–µ—Ç —Å–∫—Ä—ã—Ç—ã–µ –Ω–∞–º–µ—Ä–µ–Ω–∏—è –∏ —Å–º—ã—Å–ª–æ–≤—ã–µ —Å–≤—è–∑–∏ –≤ —Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */

const SmartLogger = {
  semantic: (message, data) => {
    const timestamp = new Date().toISOString();
    console.log(`üî¨ [${timestamp}] SEMANTIC ANALYZER: ${message}`, data ? JSON.stringify(data, null, 2) : '');
  }
};

/**
 * –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏—Ö —Å–≤—è–∑–µ–π
 */
class SemanticAnalyzer {
  constructor() {
    this.initializeKnowledgeBase();
  }

  initializeKnowledgeBase() {
    // –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ –∫–ª–∞—Å—Ç–µ—Ä—ã —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –ø–æ–Ω—è—Ç–∏–π
    this.semanticClusters = {
      branding: {
        core: ['–ª–æ–≥–æ—Ç–∏–ø', '–±—Ä–µ–Ω–¥', '—Ñ–∏—Ä–º–µ–Ω–Ω—ã–π —Å—Ç–∏–ª—å', '–∞–π–¥–µ–Ω—Ç–∏–∫–∞'],
        related: ['–≤–∏–∑–∏—Ç–∫–∞', '—Ñ–∏—Ä–º–µ–Ω–Ω—ã–µ —Ü–≤–µ—Ç–∞', '—à—Ä–∏—Ñ—Ç', '—Å–ª–æ–≥–∞–Ω', '—ç–º–±–ª–µ–º–∞'],
        implications: ['–º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å', '—É–∑–Ω–∞–≤–∞–µ–º–æ—Å—Ç—å', '–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∏–∑–º'],
        typical_next_steps: ['–≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è', '—Ü–≤–µ—Ç–æ–≤—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã', '–º–æ–Ω–æ—Ö—Ä–æ–º–Ω–∞—è –≤–µ—Ä—Å–∏—è', '–ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–∞ –Ω–æ—Å–∏—Ç–µ–ª—è—Ö']
      },

      image_creation: {
        core: ['–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ', '–∫–∞—Ä—Ç–∏–Ω–∫–∞', '—Ä–∏—Å—É–Ω–æ–∫', '–ø–∞–Ω–¥–∞', '–∫–∏–±–µ—Ä', '–ø–µ—Ä—Å–æ–Ω–∞–∂', '—Å–æ–∑–¥–∞–π', '–Ω–∞—Ä–∏—Å—É–π'],
        related: ['—Ñ–æ—Ç–æ', '–∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è', '–∞—Ä—Ç', '–¥–∏–∑–∞–π–Ω', '–∂–∏–≤–æ—Ç–Ω–æ–µ', '—Ä–æ–±–æ—Ç', '—Ç–µ—Ö–Ω–æ', '—Ñ—É—Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π'],
        implications: ['–≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è', '—Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ', '—Å—Ç–∏–ª–∏–∑–∞—Ü–∏—è'],
        typical_next_steps: ['–≤—ã–±–æ—Ä —Å—Ç–∏–ª—è', '–¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è', '—Ü–≤–µ—Ç–æ–∫–æ—Ä—Ä–µ–∫—Ü–∏—è', '–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è']
      },

      apparel_design: {
        core: ['–ø—Ä–∏–Ω—Ç', '—Ñ—É—Ç–±–æ–ª–∫–∞', '–æ–¥–µ–∂–¥–∞', '—Ç–∏—à–∞—Ä—Ç'],
        related: ['–ø–µ—á–∞—Ç—å', '—Ç–∫–∞–Ω—å', '–∫—Ä–∞—Å–∫–∏', '—Ä–∞–∑–º–µ—Ä', '–ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ'],
        implications: ['—á–∏—Ç–∞–µ–º–æ—Å—Ç—å –Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏', '–¥–æ–ª–≥–æ–≤–µ—á–Ω–æ—Å—Ç—å –ø–µ—á–∞—Ç–∏', '–ø—Ä–æ—Å—Ç–æ—Ç–∞ —Ñ–æ—Ä–º'],
        typical_next_steps: ['–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è –ø–µ—á–∞—Ç–∏', '–∞–¥–∞–ø—Ç–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤', '—Ü–≤–µ—Ç–æ–∫–æ—Ä—Ä–µ–∫—Ü–∏—è']
      },

      embroidery_design: {
        core: ['–≤—ã—à–∏–≤–∫–∞', '–º–∞—à–∏–Ω–Ω–∞—è –≤—ã—à–∏–≤–∫–∞', 'dst', 'pes', 'jef'],
        related: ['–Ω–∏—Ç–∫–∏', '–ø–ª–æ—Ç–Ω–æ—Å—Ç—å', '—Å—Ç–µ–∂–∫–∏', '–¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è'],
        implications: ['–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –º–µ–ª–∫–∏—Ö –¥–µ—Ç–∞–ª–µ–π', '–º–∞–∫—Å–∏–º—É–º 15 —Ü–≤–µ—Ç–æ–≤', '—Ç–æ–ª—â–∏–Ω–∞ –ª–∏–Ω–∏–π'],
        typical_next_steps: ['—É–ø—Ä–æ—â–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π', '–∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç –≤—ã—à–∏–≤–∫–∏', '–ø–æ–¥–±–æ—Ä –Ω–∏—Ç–æ–∫']
      },

      character_design: {
        core: ['–ø–µ—Ä—Å–æ–Ω–∞–∂', '–≥–µ—Ä–æ–π', 'character', 'mascot'],
        related: ['—ç–º–æ—Ü–∏–∏', '–ø–æ–∑—ã', '–≤—ã—Ä–∞–∂–µ–Ω–∏—è', '—Å—Ç–∏–ª—å', '–ø—Ä–æ–ø–æ—Ä—Ü–∏–∏'],
        implications: ['—É–∑–Ω–∞–≤–∞–µ–º–æ—Å—Ç—å', '—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å–≤—è–∑—å', '–º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è'],
        typical_next_steps: ['–≤–∞—Ä–∏–∞—Ü–∏–∏ —ç–º–æ—Ü–∏–π', '—Ä–∞–∑–Ω—ã–µ –ø–æ–∑—ã', '—Å—Ç–∏–ª–∏–∑–∞—Ü–∏—è']
      },

      signage_design: {
        core: ['–≤—ã–≤–µ—Å–∫–∞', '–±–∞–Ω–Ω–µ—Ä', '—É–∫–∞–∑–∞—Ç–µ–ª—å', '—Ä–µ–∫–ª–∞–º–∞'],
        related: ['—á–∏—Ç–∞–µ–º–æ—Å—Ç—å', '–∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å', '—Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞', '—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞'],
        implications: ['–≤–∏–¥–∏–º–æ—Å—Ç—å –∏–∑–¥–∞–ª–µ–∫–∞', '–ø–æ–≥–æ–¥–Ω–∞—è —Å—Ç–æ–π–∫–æ—Å—Ç—å', '–ø—Ä–æ—Å—Ç–æ—Ç–∞ –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è'],
        typical_next_steps: ['—É–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç–∏', '—É–ø—Ä–æ—â–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π', '–≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è']
      }
    };

    // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –Ω–∞–º–µ—Ä–µ–Ω–∏–π
    this.intentionPatterns = {
      continuation: {
        patterns: ['—Ç–µ–ø–µ—Ä—å', '–∞ —Ç–µ–ø–µ—Ä—å', '—Å–¥–µ–ª–∞–π –µ–≥–æ', '–∏–∑–º–µ–Ω–∏ –µ–≥–æ', '–¥–æ–±–∞–≤—å –∫ –Ω–µ–º—É', '–∏ –µ—â–µ'],
        confidence: 0.9,
        type: 'modify_existing'
      },

      new_project: {
        patterns: ['—Å–æ–∑–¥–∞–π –Ω–æ–≤—ã–π', '–¥—Ä—É–≥–æ–π', '–µ—â–µ –æ–¥–∏–Ω', '–¥–∞–≤–∞–π —Å–¥–µ–ª–∞–µ–º', '—Ö–æ—á—É —Å–æ–∑–¥–∞—Ç—å'],
        confidence: 0.85,
        type: 'create_new'
      },

      improvement: {
        patterns: ['—É–ª—É—á—à–∏', '—Å–¥–µ–ª–∞–π –ª—É—á—à–µ', '–¥–æ—Ä–∞–±–æ—Ç–∞–π', '–æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–π', '–∏—Å–ø—Ä–∞–≤—å'],
        confidence: 0.8,
        type: 'enhance_existing'
      },

      variation: {
        patterns: ['–≤–∞—Ä–∏–∞–Ω—Ç', '–≤–µ—Ä—Å–∏—è', '–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞', '–ø–æ-–¥—Ä—É–≥–æ–º—É', '–≤ –¥—Ä—É–≥–æ–º —Å—Ç–∏–ª–µ'],
        confidence: 0.75,
        type: 'create_variation'
      },

      format_conversion: {
        patterns: ['–≤–µ–∫—Ç–æ—Ä–∏–∑—É–π', '–≤ svg', '–¥–ª—è –ø–µ—á–∞—Ç–∏', '–¥–ª—è –≤—ã—à–∏–≤–∫–∏', '–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–π'],
        confidence: 0.95,
        type: 'format_conversion'
      }
    };

    // –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏
    this.contextClues = {
      business_types: {
        '–∫–æ—Ñ–µ–π–Ω—è': {
          typical_colors: ['–∫–æ—Ä–∏—á–Ω–µ–≤—ã–π', '–±–µ–∂–µ–≤—ã–π', '—Ç–µ–º–Ω–æ-–∑–µ–ª–µ–Ω—ã–π', '–∫—Ä–µ–º–æ–≤—ã–π'],
          typical_elements: ['–∑–µ—Ä–Ω–∞ –∫–æ—Ñ–µ', '—á–∞—à–∫–∞', '–ø–∞—Ä', '–ª–∏—Å—Ç—å—è'],
          style_preferences: ['—É—é—Ç–Ω—ã–π', '—Ç–µ–ø–ª—ã–π', '–Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–π']
        },
        '–ø–∏—Ü—Ü–µ—Ä–∏—è': {
          typical_colors: ['–∫—Ä–∞—Å–Ω—ã–π', '–∑–µ–ª–µ–Ω—ã–π', '–±–µ–ª—ã–π', '–∂–µ–ª—Ç—ã–π'],
          typical_elements: ['–ø–∏—Ü—Ü–∞', '–∏—Ç–∞–ª—å—è–Ω—Å–∫–∏–π —Ñ–ª–∞–≥', '–ø–æ–≤–∞—Ä', '–ø–µ—á—å'],
          style_preferences: ['–∏—Ç–∞–ª—å—è–Ω—Å–∫–∏–π', '—Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–π', '–∞–ø–ø–µ—Ç–∏—Ç–Ω—ã–π']
        },
        '–º–∞–≥–∞–∑–∏–Ω': {
          typical_colors: ['—Å–∏–Ω–∏–π', '–∫—Ä–∞—Å–Ω—ã–π', '–∑–µ–ª–µ–Ω—ã–π', '–æ—Ä–∞–Ω–∂–µ–≤—ã–π'],
          typical_elements: ['–∫–æ—Ä–∑–∏–Ω–∞', '—Å—É–º–∫–∞', '—Ç–µ–ª–µ–∂–∫–∞', '–∑–¥–∞–Ω–∏–µ'],
          style_preferences: ['–¥–æ—Å—Ç—É–ø–Ω—ã–π', '–¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π', '—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π']
        }
      }
    };

    // –¶–µ–ø–æ—á–∫–∏ –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Å–≤—è–∑–µ–π
    this.logicalChains = {
      '–ª–æ–≥–æ—Ç–∏–ø -> –ø–µ—á–∞—Ç—å': ['–≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è', '—Ü–≤–µ—Ç–æ–≤–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è', '–º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ'],
      '–ø–µ—Ä—Å–æ–Ω–∞–∂ -> –≤—ã—à–∏–≤–∫–∞': ['—É–ø—Ä–æ—â–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π', '—Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤', '—É–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ç–æ–ª—â–∏–Ω—ã –ª–∏–Ω–∏–π'],
      '–ø—Ä–∏–Ω—Ç -> —Ñ—É—Ç–±–æ–ª–∫–∞': ['–∞–¥–∞–ø—Ç–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–∞', '—Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ', '—É—á–µ—Ç —Ç–∫–∞–Ω–∏'],
      '—ç–º–±–ª–µ–º–∞ -> –≤—ã–≤–µ—Å–∫–∞': ['—É–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç–∏', '—É–ø—Ä–æ—â–µ–Ω–∏–µ –º–µ–ª–∫–∏—Ö –¥–µ—Ç–∞–ª–µ–π', '—á–∏—Ç–∞–µ–º–æ—Å—Ç—å']
    };
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
   */
  analyzeSemantics(query, context = {}) {
    SmartLogger.semantic(`–°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞: "${query}"`);

    const analysis = {
      query: query,
      semantic_cluster: this.identifySemanticCluster(query),
      intentions: this.analyzeIntentions(query),
      context_clues: this.extractContextClues(query),
      logical_chain: this.buildLogicalChain(query, context),
      implicit_requirements: this.identifyImplicitRequirements(query),
      confidence: 0
    };

    // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â—É—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –∞–Ω–∞–ª–∏–∑–∞
    analysis.confidence = this.calculateAnalysisConfidence(analysis);

    SmartLogger.semantic('–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:', analysis);
    return analysis;
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –∫–ª–∞—Å—Ç–µ—Ä–∞
   */
  identifySemanticCluster(query) {
    const lowerQuery = query.toLowerCase();
    const clusterScores = {};

    SmartLogger.semantic(`–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∫–ª–∞—Å—Ç–µ—Ä—ã –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: "${lowerQuery}"`);

    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å –∫–∞–∂–¥—ã–º –∫–ª–∞—Å—Ç–µ—Ä–æ–º
    Object.entries(this.semanticClusters).forEach(([clusterName, cluster]) => {
      let score = 0;
      const matchedCore = [];
      const matchedRelated = [];
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
      cluster.core.forEach(keyword => {
        if (lowerQuery.includes(keyword)) {
          score += 10; // –í—ã—Å–æ–∫–∏–π –≤–µ—Å –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–ª–æ–≤
          matchedCore.push(keyword);
        }
      });

      cluster.related.forEach(keyword => {
        if (lowerQuery.includes(keyword)) {
          score += 5; // –°—Ä–µ–¥–Ω–∏–π –≤–µ—Å –¥–ª—è —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å–ª–æ–≤
          matchedRelated.push(keyword);
        }
      });

      if (score > 0) {
        const confidence = Math.min(score * 8, 100); // –°–Ω–∏–∂–∞–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è –±–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        clusterScores[clusterName] = {
          score,
          confidence,
          cluster: cluster,
          matchedCore,
          matchedRelated
        };
        
        SmartLogger.semantic(`–ö–ª–∞—Å—Ç–µ—Ä ${clusterName}: —Å—á–µ—Ç=${score}, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å=${confidence}%, —Å–æ–≤–ø–∞–ª–æ –∫–ª—é—á–µ–≤—ã—Ö=${matchedCore.length}, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö=${matchedRelated.length}`);
      }
    });

    // –ù–∞—Ö–æ–¥–∏–º –∫–ª–∞—Å—Ç–µ—Ä —Å –Ω–∞–∏–≤—ã—Å—à–∏–º —Å—á–µ—Ç–æ–º
    const bestCluster = Object.entries(clusterScores)
      .sort(([,a], [,b]) => b.score - a.score)[0];

    if (bestCluster) {
      SmartLogger.semantic(`–û–ø—Ä–µ–¥–µ–ª–µ–Ω –ª—É—á—à–∏–π —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∫–ª–∞—Å—Ç–µ—Ä: ${bestCluster[0]} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${bestCluster[1].confidence}%)`);
      return {
        name: bestCluster[0],
        ...bestCluster[1]
      };
    }

    SmartLogger.semantic(`–°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∫–ª–∞—Å—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: "${lowerQuery}"`);
    return null;
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ –Ω–∞–º–µ—Ä–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  analyzeIntentions(query) {
    const lowerQuery = query.toLowerCase();
    const detectedIntentions = [];

    Object.entries(this.intentionPatterns).forEach(([intentionName, intentionData]) => {
      let matches = 0;
      const matchedPatterns = [];

      intentionData.patterns.forEach(pattern => {
        if (lowerQuery.includes(pattern)) {
          matches++;
          matchedPatterns.push(pattern);
        }
      });

      if (matches > 0) {
        detectedIntentions.push({
          name: intentionName,
          type: intentionData.type,
          confidence: intentionData.confidence * (matches / intentionData.patterns.length),
          matched_patterns: matchedPatterns,
          strength: matches
        });
      }
    });

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
    detectedIntentions.sort((a, b) => b.confidence - a.confidence);

    SmartLogger.semantic(`–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –Ω–∞–º–µ—Ä–µ–Ω–∏–π: ${detectedIntentions.length}`, detectedIntentions);
    return detectedIntentions;
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã—Ö –ø–æ–¥—Å–∫–∞–∑–æ–∫
   */
  extractContextClues(query) {
    const lowerQuery = query.toLowerCase();
    const clues = {
      business_context: null,
      style_hints: [],
      color_hints: [],
      usage_hints: []
    };

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –±–∏–∑–Ω–µ—Å–∞
    Object.entries(this.contextClues.business_types).forEach(([businessType, businessData]) => {
      if (lowerQuery.includes(businessType)) {
        clues.business_context = {
          type: businessType,
          data: businessData
        };
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ —Ü–≤–µ—Ç–∞–º
        clues.color_hints.push(...businessData.typical_colors);
        clues.style_hints.push(...businessData.style_preferences);
      }
    });

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    const usageContexts = {
      '–ø–µ—á–∞—Ç—å': { medium: 'print', requirements: ['–≤—ã—Å–æ–∫–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ', 'CMYK —Ü–≤–µ—Ç–∞'] },
      '–≤–µ–±': { medium: 'digital', requirements: ['RGB —Ü–≤–µ—Ç–∞', '–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–∞'] },
      '–≤—ã–≤–µ—Å–∫–∞': { medium: 'large_format', requirements: ['–≤—ã—Å–æ–∫–∏–π –∫–æ–Ω—Ç—Ä–∞—Å—Ç', '–ø—Ä–æ—Å—Ç—ã–µ —Ñ–æ—Ä–º—ã'] },
      '–≤—ã—à–∏–≤–∫–∞': { medium: 'embroidery', requirements: ['—É–ø—Ä–æ—â–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π', '–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤'] }
    };

    Object.entries(usageContexts).forEach(([keyword, contextData]) => {
      if (lowerQuery.includes(keyword)) {
        clues.usage_hints.push(contextData);
      }
    });

    SmartLogger.semantic('–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏:', clues);
    return clues;
  }

  /**
   * –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ª–æ–≥–∏—á–µ—Å–∫–æ–π —Ü–µ–ø–æ—á–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
   */
  buildLogicalChain(query, context) {
    const lowerQuery = query.toLowerCase();
    const chains = [];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤—ã–µ —Ü–µ–ø–æ—á–∫–∏
    Object.entries(this.logicalChains).forEach(([chainKey, steps]) => {
      const [from, to] = chainKey.split(' -> ');
      
      if (lowerQuery.includes(from) && lowerQuery.includes(to)) {
        chains.push({
          from,
          to,
          steps,
          type: 'direct_chain',
          confidence: 0.9
        });
      }
    });

    // –°—Ç—Ä–æ–∏–º —Ü–µ–ø–æ—á–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    if (context.hasRecentImages && lowerQuery.includes('–≤–µ–∫—Ç–æ—Ä')) {
      chains.push({
        from: 'existing_image',
        to: 'vector_format',
        steps: ['–∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è', '–∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–Ω—Ç—É—Ä–æ–≤', '–≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'],
        type: 'contextual_chain',
        confidence: 0.85
      });
    }

    SmartLogger.semantic('–ü–æ—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ü–µ–ø–æ—á–∫–∏:', chains);
    return chains;
  }

  /**
   * –í—ã—è–≤–ª–µ–Ω–∏–µ –Ω–µ—è–≤–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
   */
  identifyImplicitRequirements(query) {
    const requirements = [];
    const lowerQuery = query.toLowerCase();

    // –ù–µ—è–≤–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è –ª–æ–≥–æ—Ç–∏–ø–æ–≤
    if (lowerQuery.includes('–ª–æ–≥–æ—Ç–∏–ø')) {
      requirements.push({
        type: 'scalability',
        description: '–õ–æ–≥–æ—Ç–∏–ø –¥–æ–ª–∂–µ–Ω –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞—Ç—å—Å—è –±–µ–∑ –ø–æ—Ç–µ—Ä–∏ –∫–∞—á–µ—Å—Ç–≤–∞',
        importance: 'high',
        suggested_action: '–≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'
      });

      requirements.push({
        type: 'simplicity',
        description: '–õ–æ–≥–æ—Ç–∏–ø –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–æ—Å—Ç—ã–º –∏ –∑–∞–ø–æ–º–∏–Ω–∞—é—â–∏–º—Å—è',
        importance: 'medium',
        suggested_action: '—É–ø—Ä–æ—â–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π'
      });
    }

    // –ù–µ—è–≤–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è –ø–µ—á–∞—Ç–∏
    if (lowerQuery.includes('–ø–µ—á–∞—Ç—å') || lowerQuery.includes('–ø—Ä–∏–Ω—Ç')) {
      requirements.push({
        type: 'print_quality',
        description: '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Ö–æ—Ä–æ—à–æ –ø–µ—á–∞—Ç–∞—Ç—å—Å—è',
        importance: 'high',
        suggested_action: '–≤—ã—Å–æ–∫–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∏ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å'
      });

      requirements.push({
        type: 'color_mode',
        description: '–¶–≤–µ—Ç–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è –ø–µ—á–∞—Ç–∏',
        importance: 'medium',
        suggested_action: '–∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ CMYK'
      });
    }

    // –ù–µ—è–≤–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è –≤—ã—à–∏–≤–∫–∏
    if (lowerQuery.includes('–≤—ã—à–∏–≤–∫–∞')) {
      requirements.push({
        type: 'thread_limitation',
        description: '–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ü–≤–µ—Ç–æ–≤ –Ω–∏—Ç–µ–π',
        importance: 'critical',
        suggested_action: '—Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ –ø–∞–ª–∏—Ç—Ä—ã –¥–æ 8-12 —Ü–≤–µ—Ç–æ–≤'
      });

      requirements.push({
        type: 'detail_simplification',
        description: '–ú–µ–ª–∫–∏–µ –¥–µ—Ç–∞–ª–∏ –Ω–µ –ø–æ–¥—Ö–æ–¥—è—Ç –¥–ª—è –≤—ã—à–∏–≤–∫–∏',
        importance: 'high',
        suggested_action: '—É–ø—Ä–æ—â–µ–Ω–∏–µ –∏ —É–∫—Ä—É–ø–Ω–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤'
      });
    }

    SmartLogger.semantic('–í—ã—è–≤–ª–µ–Ω–Ω—ã–µ –Ω–µ—è–≤–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è:', requirements);
    return requirements;
  }

  /**
   * –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑–∞
   */
  calculateAnalysisConfidence(analysis) {
    let confidence = 0;
    let factors = 0;

    // –§–∞–∫—Ç–æ—Ä: —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∫–ª–∞—Å—Ç–µ—Ä (–æ—Å–Ω–æ–≤–Ω–æ–π –≤–µ—Å)
    if (analysis.semantic_cluster && analysis.semantic_cluster.confidence > 0) {
      confidence += analysis.semantic_cluster.confidence;
      factors++;
      SmartLogger.semantic(`–ö–ª–∞—Å—Ç–µ—Ä –¥–æ–±–∞–≤–∏–ª: ${analysis.semantic_cluster.confidence}% —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏`);
    }

    // –§–∞–∫—Ç–æ—Ä: –Ω–∞–º–µ—Ä–µ–Ω–∏—è
    if (analysis.intentions.length > 0) {
      const avgIntentionConfidence = analysis.intentions.reduce((sum, intent) => 
        sum + intent.confidence * 100, 0) / analysis.intentions.length;
      confidence += avgIntentionConfidence * 0.3;
      factors++;
      SmartLogger.semantic(`–ù–∞–º–µ—Ä–µ–Ω–∏—è –¥–æ–±–∞–≤–∏–ª–∏: ${avgIntentionConfidence * 0.3}% —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏`);
    }

    // –§–∞–∫—Ç–æ—Ä: –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏
    if (analysis.context_clues.business_context || analysis.context_clues.usage_hints.length > 0) {
      confidence += 40;
      factors++;
      SmartLogger.semantic(`–ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–æ–±–∞–≤–∏–ª: 40% —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏`);
    }

    // –§–∞–∫—Ç–æ—Ä: –ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ü–µ–ø–æ—á–∫–∏
    if (analysis.logical_chain.length > 0) {
      const avgChainConfidence = analysis.logical_chain.reduce((sum, chain) => 
        sum + chain.confidence * 100, 0) / analysis.logical_chain.length;
      confidence += avgChainConfidence * 0.2;
      factors++;
      SmartLogger.semantic(`–¶–µ–ø–æ—á–∫–∏ –¥–æ–±–∞–≤–∏–ª–∏: ${avgChainConfidence * 0.2}% —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏`);
    }

    // –§–∞–∫—Ç–æ—Ä: –Ω–µ—è–≤–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
    if (analysis.implicit_requirements.length > 0) {
      confidence += 30;
      factors++;
      SmartLogger.semantic(`–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–æ–±–∞–≤–∏–ª–∏: 30% —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏`);
    }

    // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –±–∞–∑–æ–≤–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –µ—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ñ–∞–∫—Ç–æ—Ä
    if (factors > 0 && confidence < 35) {
      confidence = 35;
      SmartLogger.semantic(`–ü—Ä–∏–º–µ–Ω–µ–Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –±–∞–∑–æ–≤–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: 35%`);
    }

    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –µ—Å–ª–∏ –±–æ–ª—å—à–µ 100%
    const finalConfidence = Math.min(confidence, 100);

    SmartLogger.semantic(`–§–∏–Ω–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: ${finalConfidence.toFixed(1)}% (—Ñ–∞–∫—Ç–æ—Ä–æ–≤: ${factors})`);
    return Math.round(finalConfidence);
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
   */
  generateSemanticSuggestions(analysis) {
    const suggestions = [];

    // –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –∫–ª–∞—Å—Ç–µ—Ä–∞
    if (analysis.semantic_cluster) {
      const cluster = analysis.semantic_cluster.cluster;
      cluster.typical_next_steps.forEach(step => {
        suggestions.push({
          type: 'cluster_suggestion',
          action: step,
          reason: `–¢–∏–ø–∏—á–Ω—ã–π —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ –¥–ª—è ${analysis.semantic_cluster.name}`,
          confidence: analysis.semantic_cluster.confidence * 0.01
        });
      });
    }

    // –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–µ—è–≤–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
    analysis.implicit_requirements.forEach(req => {
      if (req.importance === 'critical' || req.importance === 'high') {
        suggestions.push({
          type: 'requirement_suggestion',
          action: req.suggested_action,
          reason: req.description,
          confidence: req.importance === 'critical' ? 0.9 : 0.7
        });
      }
    });

    // –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    if (analysis.context_clues.business_context) {
      const businessData = analysis.context_clues.business_context.data;
      suggestions.push({
        type: 'context_suggestion',
        action: `–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ü–≤–µ—Ç–∞: ${businessData.typical_colors.slice(0, 3).join(', ')}`,
        reason: `–ü–æ–¥—Ö–æ–¥—è—â–∏–µ —Ü–≤–µ—Ç–∞ –¥–ª—è ${analysis.context_clues.business_context.type}`,
        confidence: 0.6
      });
    }

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
    suggestions.sort((a, b) => b.confidence - a.confidence);

    SmartLogger.semantic('–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:', suggestions.slice(0, 5));
    return suggestions.slice(0, 5); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ø-5
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –ø—Ä–æ–µ–∫—Ç–æ–º
   */
  analyzeProjectCompatibility(query, existingProject) {
    if (!existingProject) return { compatible: false, score: 0 };

    const queryAnalysis = this.analyzeSemantics(query);
    const compatibility = {
      compatible: false,
      score: 0,
      reasons: [],
      conflicts: []
    };

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –∫–æ–Ω—Ü–µ–ø—Ü–∏–π
    if (queryAnalysis.semantic_cluster) {
      const clusterName = queryAnalysis.semantic_cluster.name;
      const projectConcept = existingProject.concept;

      // –ü—Ä—è–º–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–π
      if (clusterName === projectConcept || 
          this.areRelatedConcepts(clusterName, projectConcept)) {
        compatibility.score += 40;
        compatibility.reasons.push(`–°–æ–≤–º–µ—Å—Ç–∏–º—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏: ${clusterName} –∏ ${projectConcept}`);
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–º–µ—Ä–µ–Ω–∏—è –Ω–∞ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—é
    const modificationIntents = queryAnalysis.intentions.filter(intent => 
      intent.type === 'modify_existing' || intent.type === 'enhance_existing'
    );

    if (modificationIntents.length > 0) {
      compatibility.score += 30;
      compatibility.reasons.push('–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –Ω–∞ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—é —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ü–µ–ø–æ—á–∫–∏
    queryAnalysis.logical_chain.forEach(chain => {
      if (this.chainAppliesToProject(chain, existingProject)) {
        compatibility.score += 20;
        compatibility.reasons.push(`–õ–æ–≥–∏—á–µ—Å–∫–∞—è —Ü–µ–ø–æ—á–∫–∞ ${chain.from} -> ${chain.to} –ø—Ä–∏–º–µ–Ω–∏–º–∞ –∫ –ø—Ä–æ–µ–∫—Ç—É`);
      }
    });

    compatibility.compatible = compatibility.score >= 50;
    compatibility.score = Math.min(compatibility.score, 100);

    SmartLogger.semantic('–ê–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –ø—Ä–æ–µ–∫—Ç–æ–º:', compatibility);
    return compatibility;
  }

  areRelatedConcepts(concept1, concept2) {
    const relatedGroups = [
      ['logo', '–ª–æ–≥–æ—Ç–∏–ø', 'branding'],
      ['print', '–ø—Ä–∏–Ω—Ç', 'apparel_design'],
      ['character', '–ø–µ—Ä—Å–æ–Ω–∞–∂', 'character_design'],
      ['embroidery', '–≤—ã—à–∏–≤–∫–∞', 'embroidery_design']
    ];

    return relatedGroups.some(group => 
      group.includes(concept1) && group.includes(concept2)
    );
  }

  chainAppliesToProject(chain, project) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–º–µ–Ω–∏–º–∞ –ª–∏ –ª–æ–≥–∏—á–µ—Å–∫–∞—è —Ü–µ–ø–æ—á–∫–∞ –∫ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞–º –ø—Ä–æ–µ–∫—Ç–∞
    const hasRelevantArtifacts = project.artifacts.some(artifact => {
      return chain.from.includes(artifact.type) || 
             artifact.description?.toLowerCase().includes(chain.from);
    });

    return hasRelevantArtifacts;
  }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
const semanticAnalyzer = new SemanticAnalyzer();

module.exports = {
  analyzeSemantics: semanticAnalyzer.analyzeSemantics.bind(semanticAnalyzer),
  generateSemanticSuggestions: semanticAnalyzer.generateSemanticSuggestions.bind(semanticAnalyzer),
  analyzeProjectCompatibility: semanticAnalyzer.analyzeProjectCompatibility.bind(semanticAnalyzer),
  
  // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
  SemanticAnalyzer
};