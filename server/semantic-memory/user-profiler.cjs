/**
 * –ü—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤—â–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è, –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
 * –§–ê–ó–ê 1: –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è
 */

// –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç –¥–ª—è ES –º–æ–¥—É–ª–µ–π
let storage = null;

async function getStorage() {
  if (!storage) {
    const storageModule = await import('../storage.ts');
    storage = storageModule.storage;
  }
  return storage;
}

const SmartLogger = {
  profiler: (message, data) => {
    const timestamp = new Date().toISOString();
    console.log(`üë§üìä [${timestamp}] USER PROFILER: ${message}`, data ? JSON.stringify(data, null, 2) : '');
  }
};

/**
 * –ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
 */
class UserProfiler {
  constructor() {
    this.initialized = false;
    this.initializeProfilingRules();
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∞–≤–∏–ª –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  initializeProfilingRules() {
    // –ü–∞—Ç—Ç–µ—Ä–Ω—ã —Å—Ç–∏–ª–µ–π –æ–±—â–µ–Ω–∏—è
    this.communicationPatterns = {
      formal: {
        keywords: ['–ø–æ–∂–∞–ª—É–π—Å—Ç–∞', '–±–ª–∞–≥–æ–¥–∞—Ä—é', '–∏–∑–≤–∏–Ω–∏—Ç–µ', '–±—É–¥—å—Ç–µ –¥–æ–±—Ä—ã', '–Ω–µ –º–æ–≥–ª–∏ –±—ã –≤—ã'],
        phrases: ['—Ñ–æ—Ä–º–∞–ª—å–Ω–æ', '–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ', '–¥–µ–ª–æ–≤–æ–π —Å—Ç–∏–ª—å'],
        punctuation: ['!', '.', ','],
        weight: 1.0
      },
      
      friendly: {
        keywords: ['—Å–ø–∞—Å–∏–±–æ', '–ø—Ä–∏–≤–µ—Ç', '–∫–ª–∞—Å—Å–Ω–æ', '–∫—Ä—É—Ç–æ', '–¥–∞–≤–∞–π', '–º–æ–∂–µ—à—å'],
        phrases: ['–¥—Ä—É–∂–µ—Å–∫–∏', '–Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω–æ', '–ø–æ-–¥—Ä—É–∂–µ—Å–∫–∏'],
        punctuation: ['!', ')', ':)'],
        weight: 1.0
      },
      
      brief: {
        keywords: ['–∫–æ—Ä–æ—Ç–∫–æ', '–∫—Ä–∞—Ç–∫–æ', '–±—ã—Å—Ç—Ä–æ', '—Å–∂–∞—Ç–æ'],
        phrases: ['–±–µ–∑ –¥–µ—Ç–∞–ª–µ–π', '–≤ –¥–≤—É—Ö —Å–ª–æ–≤–∞—Ö', '–≤–∫—Ä–∞—Ç—Ü–µ'],
        avgWordCount: { min: 1, max: 10 },
        weight: 0.8
      },
      
      detailed: {
        keywords: ['–ø–æ–¥—Ä–æ–±–Ω–æ', '–¥–µ—Ç–∞–ª—å–Ω–æ', '—Ä–∞—Å—Å–∫–∞–∂–∏', '–æ–±—ä—è—Å–Ω–∏', '–æ–ø–∏—à–∏'],
        phrases: ['–≤–æ –≤—Å–µ—Ö –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç—è—Ö', '—Å –¥–µ—Ç–∞–ª—è–º–∏', '–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ'],
        avgWordCount: { min: 20, max: 100 },
        weight: 0.9
      }
    };

    // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–∏–∑–∞–π–Ω-–ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
    this.designPatterns = {
      minimalist: {
        keywords: ['–º–∏–Ω–∏–º–∞–ª–∏–∑–º', '–ø—Ä–æ—Å—Ç–æ–π', '—á–∏—Å—Ç—ã–π', '–ª–∞–∫–æ–Ω–∏—á–Ω—ã–π', '–±–µ–∑ –ª–∏—à–Ω–µ–≥–æ'],
        antiKeywords: ['—Å–ª–æ–∂–Ω—ã–π', '–¥–µ—Ç–∞–ª—å–Ω—ã–π', '–º–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤'],
        weight: 1.2
      },
      
      vintage: {
        keywords: ['–≤–∏–Ω—Ç–∞–∂', '—Ä–µ—Ç—Ä–æ', '—Å—Ç–∞—Ä–∏–Ω–Ω—ã–π', '–∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π', '–≤–∏–Ω—Ç–∞–∂–Ω—ã–π'],
        timeIndicators: ['50-–µ', '60-–µ', '70-–µ', '80-–µ', '90-–µ'],
        weight: 1.0
      },
      
      modern: {
        keywords: ['—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π', '–º–æ–¥–Ω—ã–π', '–∞–∫—Ç—É–∞–ª—å–Ω—ã–π', '—Ç—Ä–µ–Ω–¥–æ–≤—ã–π', '—Å–≤–µ–∂–∏–π'],
        timeIndicators: ['2020', '2024', '—Ç–µ–∫—É—â–∏–π', '–Ω–æ–≤—ã–π'],
        weight: 1.0
      },
      
      artistic: {
        keywords: ['—Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π', '–∞—Ä—Ç–∏—Å—Ç–∏—á–Ω—ã–π', '—Ç–≤–æ—Ä—á–µ—Å–∫–∏–π', '–∞–≤–∞–Ω–≥–∞—Ä–¥', '—ç–∫—Å–ø—Ä–µ—Å—Å–∏–≤–Ω—ã–π'],
        techniques: ['–∞–∫–≤–∞—Ä–µ–ª—å', '–º–∞—Å–ª–æ', '–≥—Ä–∞—Ñ—Ñ–∏—Ç–∏', '–∞–±—Å—Ç—Ä–∞–∫—Ü–∏—è'],
        weight: 1.1
      }
    };

    // –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    this.emotionalPatterns = {
      enthusiastic: {
        keywords: ['–æ—Ç–ª–∏—á–Ω–æ', '—Å—É–ø–µ—Ä', '–ø–æ—Ç—Ä—è—Å–∞—é—â–µ', '–≤–æ—Å—Ö–∏—Ç–∏—Ç–µ–ª—å–Ω–æ', '–æ–±–æ–∂–∞—é'],
        emojis: ['!', '!!!', 'üòä', 'üéâ', '‚ú®'],
        capsWords: ['–°–£–ü–ï–†', '–û–¢–õ–ò–ß–ù–û', '–í–ê–£'],
        weight: 1.3
      },
      
      calm: {
        keywords: ['—Å–ø–æ–∫–æ–π–Ω–æ', '—Ä–∞–∑–º–µ—Ä–µ–Ω–Ω–æ', '–±–µ–∑ —Å–ø–µ—à–∫–∏', '–æ–±–¥—É–º–∞–Ω–Ω–æ'],
        phrases: ['–Ω–µ —Ç–æ—Ä–æ–ø—è—Å—å', '–≤–∑–≤–µ—à–µ–Ω–Ω–æ', '–ø—Ä–æ–¥—É–º–∞–Ω–Ω–æ'],
        punctuation: ['.', ','],
        weight: 0.8
      },
      
      professional: {
        keywords: ['–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ', '–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ', '–∫–æ–º–ø–µ—Ç–µ–Ω—Ç–Ω–æ', '—ç–∫—Å–ø–µ—Ä—Ç–Ω–æ'],
        phrases: ['–Ω–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–º —É—Ä–æ–≤–Ω–µ', '–±–∏–∑–Ω–µ—Å-–∫–∞—á–µ—Å—Ç–≤–æ'],
        weight: 1.0
      },
      
      creative: {
        keywords: ['–∫—Ä–µ–∞—Ç–∏–≤–Ω–æ', '—Ç–≤–æ—Ä—á–µ—Å–∫–∏', '–Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ', '–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ'],
        phrases: ['out of the box', '—Ç–≤–æ—Ä—á–µ—Å–∫–∏–π –ø–æ–¥—Ö–æ–¥', '–∫—Ä–µ–∞—Ç–∏–≤–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ'],
        weight: 1.2
      }
    };
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ —Å—Ç–∏–ª—è –æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—é
   */
  analyzeCommunicationStyle(userMessage) {
    const message = userMessage.toLowerCase();
    const wordCount = userMessage.split(' ').length;
    const scores = {};

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Å—Ç–∏–ª—å
    for (const [style, pattern] of Object.entries(this.communicationPatterns)) {
      let score = 0;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
      if (pattern.keywords) {
        pattern.keywords.forEach(keyword => {
          if (message.includes(keyword)) {
            score += pattern.weight;
          }
        });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ—Ä–∞–∑—ã
      if (pattern.phrases) {
        pattern.phrases.forEach(phrase => {
          if (message.includes(phrase)) {
            score += pattern.weight * 1.5;
          }
        });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—É–Ω–∫—Ç—É–∞—Ü–∏—é
      if (pattern.punctuation) {
        pattern.punctuation.forEach(punct => {
          const count = (userMessage.match(new RegExp(`\\${punct}`, 'g')) || []).length;
          score += count * 0.3;
        });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
      if (pattern.avgWordCount) {
        if (wordCount >= pattern.avgWordCount.min && wordCount <= pattern.avgWordCount.max) {
          score += pattern.weight * 2;
        }
      }

      scores[style] = score;
    }

    // –ù–∞—Ö–æ–¥–∏–º –¥–æ–º–∏–Ω–∏—Ä—É—é—â–∏–π —Å—Ç–∏–ª—å
    const dominantStyle = Object.keys(scores).reduce((a, b) => 
      scores[a] > scores[b] ? a : b
    );

    SmartLogger.profiler(`–ê–Ω–∞–ª–∏–∑ —Å—Ç–∏–ª—è –æ–±—â–µ–Ω–∏—è: ${dominantStyle}`, { scores, wordCount });

    return {
      dominantStyle,
      scores,
      confidence: scores[dominantStyle] > 1 ? Math.min(scores[dominantStyle] * 10, 100) : 20,
      wordCount
    };
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ –¥–∏–∑–∞–π–Ω-–ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
   */
  analyzeDesignPreferences(userMessage) {
    const message = userMessage.toLowerCase();
    const preferences = {
      styles: {},
      complexity: 'medium',
      colors: [],
      techniques: []
    };

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∏–ª–∏
    for (const [style, pattern] of Object.entries(this.designPatterns)) {
      let score = 0;

      // –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
      if (pattern.keywords) {
        pattern.keywords.forEach(keyword => {
          if (message.includes(keyword)) {
            score += pattern.weight;
          }
        });
      }

      // –ê–Ω—Ç–∏-–∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ (—Å–Ω–∏–∂–∞—é—Ç score)
      if (pattern.antiKeywords) {
        pattern.antiKeywords.forEach(antiKeyword => {
          if (message.includes(antiKeyword)) {
            score -= 0.5;
          }
        });
      }

      // –í—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
      if (pattern.timeIndicators) {
        pattern.timeIndicators.forEach(indicator => {
          if (message.includes(indicator)) {
            score += 0.8;
          }
        });
      }

      // –¢–µ—Ö–Ω–∏–∫–∏
      if (pattern.techniques) {
        pattern.techniques.forEach(technique => {
          if (message.includes(technique)) {
            score += 0.6;
            preferences.techniques.push(technique);
          }
        });
      }

      if (score > 0) {
        preferences.styles[style] = score;
      }
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å
    if (message.includes('–ø—Ä–æ—Å—Ç–æ–π') || message.includes('–º–∏–Ω–∏–º–∞–ª')) {
      preferences.complexity = 'simple';
    } else if (message.includes('—Å–ª–æ–∂–Ω—ã–π') || message.includes('–¥–µ—Ç–∞–ª—å–Ω—ã–π')) {
      preferences.complexity = 'complex';
    }

    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–≤–µ—Ç–∞
    preferences.colors = this.extractColors(message);

    SmartLogger.profiler('–ê–Ω–∞–ª–∏–∑ –¥–∏–∑–∞–π–Ω-–ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π', preferences);
    return preferences;
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
   */
  analyzeEmotionalState(userMessage, sessionHistory = []) {
    const message = userMessage.toLowerCase();
    const emotions = {};
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é —ç–º–æ—Ü–∏—é
    for (const [emotion, pattern] of Object.entries(this.emotionalPatterns)) {
      let score = 0;
      
      // –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
      if (pattern.keywords) {
        pattern.keywords.forEach(keyword => {
          if (message.includes(keyword)) {
            score += pattern.weight;
          }
        });
      }

      // –§—Ä–∞–∑—ã
      if (pattern.phrases) {
        pattern.phrases.forEach(phrase => {
          if (message.includes(phrase)) {
            score += pattern.weight * 1.5;
          }
        });
      }

      // –≠–º–æ–¥–∑–∏ –∏ –≤–æ—Å–∫–ª–∏—Ü–∞–Ω–∏—è
      if (pattern.emojis) {
        pattern.emojis.forEach(emoji => {
          const count = (userMessage.match(new RegExp(`\\${emoji}`, 'g')) || []).length;
          score += count * 0.5;
        });
      }

      // –°–ª–æ–≤–∞ –∫–∞–ø—Å–æ–º
      if (pattern.capsWords) {
        pattern.capsWords.forEach(capsWord => {
          if (userMessage.includes(capsWord)) {
            score += 1.0;
          }
        });
      }

      emotions[emotion] = score;
    }

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
    const contextualEmotion = this.analyzeEmotionalContext(sessionHistory);
    
    const dominantEmotion = Object.keys(emotions).reduce((a, b) => 
      emotions[a] > emotions[b] ? a : b
    );

    const result = {
      currentEmotion: dominantEmotion,
      emotionScores: emotions,
      intensity: Math.min(emotions[dominantEmotion] * 2, 10),
      confidence: emotions[dominantEmotion] > 0.5 ? Math.min(emotions[dominantEmotion] * 15, 100) : 30,
      contextualShift: contextualEmotion
    };

    SmartLogger.profiler(`–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑: ${dominantEmotion}`, {
      intensity: result.intensity,
      confidence: result.confidence
    });

    return result;
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async createPersonalizedProfile(userId, analysisData) {
    try {
      const db = await getStorage();
      const existingProfile = await db.getUserProfile(userId);
      
      const profileData = {
        userId: userId,
        communicationStyle: analysisData.communicationStyle?.dominantStyle || 'friendly',
        preferredLanguage: 'ru', // TODO: –¥–æ–±–∞–≤–∏—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞
        responseLength: this.determinePreferredLength(analysisData.communicationStyle),
        favoriteColors: analysisData.designPreferences?.colors || [],
        preferredStyles: Object.keys(analysisData.designPreferences?.styles || {}),
        designComplexity: analysisData.designPreferences?.complexity || 'medium',
        emotionalTone: analysisData.emotionalState?.currentEmotion || 'neutral',
        feedbackStyle: this.determineFeedbackStyle(analysisData.emotionalState),
        learningProgress: JSON.stringify({}),
        successPatterns: JSON.stringify({}),
        totalInteractions: existingProfile ? existingProfile.totalInteractions + 1 : 1
      };

      let profile;
      if (existingProfile) {
        profile = await db.updateUserProfile(userId, profileData);
      } else {
        profile = await db.createUserProfile(profileData);
      }

      SmartLogger.profiler(`–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å ${existingProfile ? '–æ–±–Ω–æ–≤–ª–µ–Ω' : '—Å–æ–∑–¥–∞–Ω'}`, {
        userId,
        style: profileData.communicationStyle,
        emotion: profileData.emotionalTone
      });

      return profile;
    } catch (error) {
      SmartLogger.profiler(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è: ${error.message}`);
      return null;
    }
  }

  /**
   * –ê–¥–∞–ø—Ç–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –ø–æ–¥ –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  adaptResponseToProfile(baseResponse, userProfile, emotionalState) {
    if (!userProfile) return baseResponse;

    let adaptedResponse = baseResponse;

    // –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è
    adaptedResponse = this.adaptCommunicationStyle(adaptedResponse, userProfile.communicationStyle);
    
    // –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –¥–ª–∏–Ω—É –æ—Ç–≤–µ—Ç–∞
    adaptedResponse = this.adaptResponseLength(adaptedResponse, userProfile.responseLength);
    
    // –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–æ–Ω
    adaptedResponse = this.adaptEmotionalTone(adaptedResponse, userProfile.emotionalTone, emotionalState);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    adaptedResponse = this.addPersonalElements(adaptedResponse, userProfile);

    SmartLogger.profiler('–û—Ç–≤–µ—Ç –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω –ø–æ–¥ –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', {
      style: userProfile.communicationStyle,
      length: userProfile.responseLength,
      tone: userProfile.emotionalTone
    });

    return adaptedResponse;
  }

  // === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ===

  extractColors(message) {
    const colorKeywords = {
      '–∫—Ä–∞—Å–Ω—ã–π': '#FF0000', '—Å–∏–Ω–∏–π': '#0000FF', '–∑–µ–ª–µ–Ω—ã–π': '#00FF00',
      '–∂–µ–ª—Ç—ã–π': '#FFFF00', '–æ—Ä–∞–Ω–∂–µ–≤—ã–π': '#FFA500', '—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π': '#800080',
      '—Ä–æ–∑–æ–≤—ã–π': '#FFC0CB', '–∫–æ—Ä–∏—á–Ω–µ–≤—ã–π': '#A52A2A', '—Å–µ—Ä—ã–π': '#808080',
      '—á–µ—Ä–Ω—ã–π': '#000000', '–±–µ–ª—ã–π': '#FFFFFF', '–∑–æ–ª–æ—Ç–æ–π': '#FFD700',
      '—Å–µ—Ä–µ–±—Ä—è–Ω—ã–π': '#C0C0C0', '–±–∏—Ä—é–∑–æ–≤—ã–π': '#40E0D0', '–ª–∏–º–æ–Ω–Ω—ã–π': '#FFFACD'
    };

    const foundColors = [];
    for (const [colorName, colorCode] of Object.entries(colorKeywords)) {
      if (message.includes(colorName)) {
        foundColors.push(colorName);
      }
    }
    return foundColors;
  }

  analyzeEmotionalContext(sessionHistory) {
    if (!sessionHistory || sessionHistory.length === 0) return null;
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
    const recentMessages = sessionHistory.slice(-3);
    let emotionalTrajectory = 'stable';
    
    // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞ (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å)
    if (recentMessages.length >= 2) {
      const lastMessage = recentMessages[recentMessages.length - 1];
      const prevMessage = recentMessages[recentMessages.length - 2];
      
      if (this.containsPositiveWords(lastMessage) && this.containsNegativeWords(prevMessage)) {
        emotionalTrajectory = 'improving';
      } else if (this.containsNegativeWords(lastMessage) && this.containsPositiveWords(prevMessage)) {
        emotionalTrajectory = 'declining';
      }
    }
    
    return emotionalTrajectory;
  }

  containsPositiveWords(message) {
    const positiveWords = ['–æ—Ç–ª–∏—á–Ω–æ', '—Å—É–ø–µ—Ä', '–∫–ª–∞—Å—Å–Ω–æ', '—Ö–æ—Ä–æ—à–æ', '–∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ', '—Å–ø–∞—Å–∏–±–æ'];
    return positiveWords.some(word => message.toLowerCase().includes(word));
  }

  containsNegativeWords(message) {
    const negativeWords = ['–ø–ª–æ—Ö–æ', '—É–∂–∞—Å–Ω–æ', '–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è', '—Ä–∞–∑–æ—á–∞—Ä–æ–≤–∞–Ω', '–ø—Ä–æ–±–ª–µ–º–∞'];
    return negativeWords.some(word => message.toLowerCase().includes(word));
  }

  determinePreferredLength(communicationStyle) {
    if (!communicationStyle) return 'medium';
    
    if (communicationStyle.scores?.brief > 1) return 'short';
    if (communicationStyle.scores?.detailed > 1) return 'detailed';
    return 'medium';
  }

  determineFeedbackStyle(emotionalState) {
    if (!emotionalState) return 'encouraging';
    
    if (emotionalState.currentEmotion === 'professional') return 'direct';
    if (emotionalState.currentEmotion === 'enthusiastic') return 'encouraging';
    if (emotionalState.currentEmotion === 'calm') return 'detailed';
    return 'encouraging';
  }

  adaptCommunicationStyle(response, style) {
    switch (style) {
      case 'formal':
        return response.replace(/–¥–∞–≤–∞–π/g, '–ø—Ä–µ–¥–ª–∞–≥–∞—é').replace(/–º–æ–∂–µ—à—å/g, '–Ω–µ –º–æ–≥–ª–∏ –±—ã –≤—ã');
      case 'brief':
        return response.split('.').slice(0, 2).join('.') + '.';
      case 'friendly':
        return response + ' üòä';
      default:
        return response;
    }
  }

  adaptResponseLength(response, preferredLength) {
    switch (preferredLength) {
      case 'short':
        return response.split('.').slice(0, 1).join('.') + '.';
      case 'detailed':
        return response; // –±–∞–∑–æ–≤—ã–π –æ—Ç–≤–µ—Ç —É–∂–µ –¥–µ—Ç–∞–ª—å–Ω—ã–π
      default:
        return response;
    }
  }

  adaptEmotionalTone(response, profileTone, currentEmotion) {
    if (currentEmotion?.currentEmotion === 'enthusiastic') {
      return response.replace(/\./g, '!');
    }
    
    if (profileTone === 'professional') {
      return response.replace(/!/g, '.');
    }
    
    return response;
  }

  addPersonalElements(response, userProfile) {
    // –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
    if (userProfile.preferredStyles?.includes('minimalist')) {
      response += '\n\n–ü–æ –≤–∞—à–µ–º—É —Å—Ç–∏–ª—é: —á–∏—Å—Ç—ã–µ –ª–∏–Ω–∏–∏ –∏ –º–∏–Ω–∏–º–∞–ª–∏–∑–º –±—É–¥—É—Ç –∏–¥–µ–∞–ª—å–Ω—ã.';
    }
    
    if (userProfile.favoriteColors?.length > 0) {
      const colors = userProfile.favoriteColors.slice(0, 2).join(' –∏ ');
      response += `\n\n–° —É—á–µ—Ç–æ–º –≤–∞—à–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π: ${colors} –æ—Ç–ª–∏—á–Ω–æ –ø–æ–¥–æ–π–¥—É—Ç.`;
    }
    
    return response;
  }
}

module.exports = new UserProfiler();