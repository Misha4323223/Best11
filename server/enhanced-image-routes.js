
/**
 * üß†üé® –ú–ê–†–®–†–£–¢–´ –ò–ù–¢–ï–õ–õ–ï–ö–¢–£–ê–õ–¨–ù–û–ì–û –£–õ–£–ß–®–ï–ù–ò–Ø –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô
 * API –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–∏—Å—Ç–µ–º–µ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —É–ª—É—á—à–µ–Ω–∏—è Pollinations.ai
 */

const express = require('express');
const router = express.Router();

// –ò–º–ø–æ—Ä—Ç –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —É–ª—É—á—à–∞—Ç–µ–ª—è
const intelligentEnhancer = require('./intelligent-pollinations-enhancer.js');

/**
 * POST /api/enhanced-images/generate
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–º —É–ª—É—á—à–µ–Ω–∏–µ–º
 */
router.post('/generate', async (req, res) => {
  try {
    const { 
      prompt, 
      style = 'photorealistic',
      projectId = null,
      context = {},
      options = {}
    } = req.body;

    if (!prompt) {
      return res.status(400).json({
        success: false,
        error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä prompt'
      });
    }

    console.log(`üß† [ENHANCED-API] –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–ª—É—á—à–µ–Ω–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é: "${prompt.substring(0, 50)}..."`);

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
    const enhancementContext = {
      style,
      projectId,
      prioritizeQuality: options.prioritizeQuality || false,
      prioritizeSpeed: options.prioritizeSpeed || false,
      allowMultipleVariants: options.allowMultipleVariants || false,
      forPrint: options.forPrint || false,
      emotionalContext: context.emotions || {},
      ...context
    };

    // –í—ã–ø–æ–ª–Ω—è–µ–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ
    const enhancementResult = await intelligentEnhancer.enhanceImageGeneration(
      prompt, 
      enhancementContext
    );

    if (enhancementResult.success) {
      res.json({
        success: true,
        imageUrl: enhancementResult.generationResult.imageUrl,
        
        // –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É–ª—É—á—à–µ–Ω–∏–∏
        enhancement: {
          originalPrompt: enhancementResult.originalPrompt,
          enhancedPrompt: enhancementResult.enhancedPrompt,
          qualityPrediction: enhancementResult.qualityPrediction,
          improvementMetrics: enhancementResult.improvementMetrics,
          techniquesUsed: enhancementResult.techniquesUsed,
          processingTime: enhancementResult.processingTime
        },
        
        // –ê–Ω–∞–ª–∏–∑
        analysis: {
          detectedStyle: enhancementResult.analysis.styleAnalysis.detectedStyle,
          primaryIntention: enhancementResult.analysis.intentionAnalysis.primaryIntention,
          confidence: enhancementResult.analysis.analysisConfidence,
          colorRecommendations: enhancementResult.analysis.colorAnalysis.recommendedPalette,
          compositionPrinciples: enhancementResult.analysis.compositionAnalysis.layoutPrinciples
        },
        
        // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendations: enhancementResult.recommendations
      });
    } else {
      res.status(500).json({
        success: false,
        error: enhancementResult.error,
        fallback: enhancementResult.fallbackResult
      });
    }

  } catch (error) {
    console.error('‚ùå [ENHANCED-API] –û—à–∏–±–∫–∞ —É–ª—É—á—à–µ–Ω–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

/**
 * POST /api/enhanced-images/analyze
 * –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–º–ø—Ç–∞ –±–µ–∑ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
router.post('/analyze', async (req, res) => {
  try {
    const { prompt, style = 'photorealistic', context = {} } = req.body;

    if (!prompt) {
      return res.status(400).json({
        success: false,
        error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä prompt'
      });
    }

    console.log(`üîç [ENHANCED-API] –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–º–ø—Ç–∞: "${prompt.substring(0, 50)}..."`);

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —É–ª—É—á—à–∞—Ç–µ–ª—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    const { components } = intelligentEnhancer;
    
    const intentionAnalysis = components.intentionAnalyzer.analyzeIntention(prompt, context);
    const styleAnalysis = components.styleAnalyzer.analyzeStyle(prompt, context);
    const colorAnalysis = components.colorSemantics.analyzeColorNeeds(prompt, style, context.emotionalContext);
    const compositionAnalysis = components.compositionSemantics.analyzeComposition(prompt, style, intentionAnalysis.primaryIntention);
    
    const enhancedPrompt = components.styleTranslator.translatePrompt(
      prompt, style, intentionAnalysis, colorAnalysis, compositionAnalysis
    );
    
    const qualityPrediction = components.qualityPredictor.predictQuality(
      enhancedPrompt, style, intentionAnalysis, colorAnalysis, compositionAnalysis
    );

    res.json({
      success: true,
      analysis: {
        intention: intentionAnalysis,
        style: styleAnalysis,
        color: colorAnalysis,
        composition: compositionAnalysis,
        qualityPrediction
      },
      enhancedPrompt,
      recommendations: qualityPrediction.recommendations
    });

  } catch (error) {
    console.error('‚ùå [ENHANCED-API] –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

/**
 * GET /api/enhanced-images/statistics
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã —É–ª—É—á—à–µ–Ω–∏—è
 */
router.get('/statistics', (req, res) => {
  try {
    const statistics = intelligentEnhancer.getSystemStatistics();
    
    res.json({
      success: true,
      statistics
    });
  } catch (error) {
    console.error('‚ùå [ENHANCED-API] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

/**
 * POST /api/enhanced-images/brand-profile
 * –°–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –±—Ä–µ–Ω–¥–∞
 */
router.post('/brand-profile', async (req, res) => {
  try {
    const { projectId, brandData } = req.body;

    if (!projectId || !brandData) {
      return res.status(400).json({
        success: false,
        error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã projectId –∏ brandData'
      });
    }

    const profile = intelligentEnhancer.components.brandConsistency.createBrandProfile(
      projectId, 
      brandData
    );

    res.json({
      success: true,
      profile,
      message: '–ü—Ä–æ—Ñ–∏–ª—å –±—Ä–µ–Ω–¥–∞ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ'
    });

  } catch (error) {
    console.error('‚ùå [ENHANCED-API] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –±—Ä–µ–Ω–¥–∞:', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

/**
 * GET /api/enhanced-images/brand-recommendations/:projectId
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –±—Ä–µ–Ω–¥–∏–Ω–≥–æ–≤–æ–π —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏
 */
router.get('/brand-recommendations/:projectId', (req, res) => {
  try {
    const { projectId } = req.params;
    
    const recommendations = intelligentEnhancer.components.brandConsistency.getConsistencyRecommendations(projectId);
    
    res.json({
      success: true,
      projectId,
      recommendations
    });
  } catch (error) {
    console.error('‚ùå [ENHANCED-API] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

/**
 * POST /api/enhanced-images/multi-generate
 * –ú—É–ª—å—Ç–∏-–≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å –≤—ã–±–æ—Ä–æ–º –ª—É—á—à–µ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
 */
router.post('/multi-generate', async (req, res) => {
  try {
    const { 
      prompt, 
      style = 'photorealistic',
      projectId = null,
      selectionCriteria = {}
    } = req.body;

    if (!prompt) {
      return res.status(400).json({
        success: false,
        error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä prompt'
      });
    }

    console.log(`üîÑ [ENHANCED-API] –ú—É–ª—å—Ç–∏-–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–ª—è: "${prompt.substring(0, 50)}..."`);

    // –í—ã–ø–æ–ª–Ω—è–µ–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ —Å –º—É–ª—å—Ç–∏-–≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π
    const enhancementResult = await intelligentEnhancer.enhanceImageGeneration(prompt, {
      style,
      projectId,
      allowMultipleVariants: true,
      prioritizeQuality: true,
      ...selectionCriteria
    });

    if (enhancementResult.success && enhancementResult.generationResult.type === 'multi_generation') {
      res.json({
        success: true,
        selectedVariant: enhancementResult.generationResult.selectedVariant,
        allVariants: enhancementResult.generationResult.allVariants,
        selectionReasoning: enhancementResult.generationResult.selectionReasoning,
        enhancement: {
          originalPrompt: enhancementResult.originalPrompt,
          enhancedPrompt: enhancementResult.enhancedPrompt,
          processingTime: enhancementResult.processingTime
        }
      });
    } else {
      res.json({
        success: true,
        message: '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –æ–±—ã—á–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è',
        result: enhancementResult
      });
    }

  } catch (error) {
    console.error('‚ùå [ENHANCED-API] –û—à–∏–±–∫–∞ –º—É–ª—å—Ç–∏-–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

module.exports = router;
