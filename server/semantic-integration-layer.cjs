/**
 * –°–ª–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–π –ø–∞–º—è—Ç–∏ —Å –º–µ—Ç–∞-—Å–µ–º–∞–Ω—Ç–∏–∫–æ–π
 * –§–ê–ó–ê 2: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –º–µ—Ç–∞-—Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–≤–∏–∂–∫–∞
 */

const semanticMemory = require('./semantic-memory/index.cjs');
const userMemoryManager = require('./semantic-memory/user-memory-manager.cjs');
const userProfiler = require('./semantic-memory/user-profiler.cjs');
const learningSystem = require('./semantic-memory/learning-system.cjs');

const SmartLogger = {
  integration: (message, data) => {
    const timestamp = new Date().toISOString();
    console.log(`üîó [${timestamp}] SEMANTIC INTEGRATION: ${message}`, data ? JSON.stringify(data, null, 2) : '');
  }
};

/**
 * –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å –º–µ—Ç–∞-—Å–µ–º–∞–Ω—Ç–∏–∫–æ–π
 */
class MetaSemanticIntegrationLayer {
  constructor() {
    this.semanticThreshold = 30;
    this.enabled = true;
  }

  /**
   * –ì–õ–ê–í–ù–´–ô –ú–ï–¢–û–î: –ú–µ—Ç–∞-—Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞
   */
  async analyzeWithSemantics(userQuery, options = {}) {
    SmartLogger.integration(`üöÄüß† –ú–ï–¢–ê-–°–ï–ú–ê–ù–¢–ò–ß–ï–°–ö–ò–ô –∞–Ω–∞–ª–∏–∑: "${userQuery.substring(0, 50)}..."`);

    try {
      if (!this.enabled) {
        return { shouldUseSemantic: false, reason: 'disabled' };
      }

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ –º–µ—Ç–∞-—Å–µ–º–∞–Ω—Ç–∏–∫—É
      const useMetaSemantics = this.shouldUseMetaSemantics(userQuery, options);
      
      if (useMetaSemantics) {
        SmartLogger.integration('üîÆ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ú–ï–¢–ê-–°–ï–ú–ê–ù–¢–ò–ß–ï–°–ö–ò–ô –∞–Ω–∞–ª–∏–∑');
        return await this.performMetaSemanticAnalysis(userQuery, options);
      } else {
        SmartLogger.integration('üß† –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑');
        return await this.performStandardSemanticAnalysis(userQuery, options);
      }

    } catch (error) {
      SmartLogger.integration(`‚ùå –û—à–∏–±–∫–∞ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: ${error.message}`);
      return { shouldUseSemantic: false, reason: 'error', error: error.message };
    }
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–µ—Ç–∞-—Å–µ–º–∞–Ω—Ç–∏–∫–∏
   */
  shouldUseMetaSemantics(userQuery, options) {
    const isComplex = userQuery.length > 50 || userQuery.split(' ').length > 8;
    const isCritical = userQuery.includes('–≤–∞–∂–Ω–æ') || userQuery.includes('—Ç–æ—á–Ω–æ');
    const hasProjectHistory = options.hasRecentImages || options.sessionId;
    const isAnalytical = userQuery.includes('–∞–Ω–∞–ª–∏–∑') || userQuery.includes('—Å–æ–≤–µ—Ç');

    const shouldUse = isComplex || isCritical || hasProjectHistory || isAnalytical;
    SmartLogger.integration(`–ú–µ—Ç–∞-—Å–µ–º–∞–Ω—Ç–∏–∫–∞: ${shouldUse ? '–í–ö–õ–Æ–ß–ï–ù–ê' : '–≤—ã–∫–ª—é—á–µ–Ω–∞'}`);
    
    return shouldUse;
  }

  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç –º–µ—Ç–∞-—Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
   */
  async performMetaSemanticAnalysis(userQuery, options) {
    try {
      const semanticResult = await semanticMemory.analyzeCompleteRequestWithMeta(
        userQuery,
        options.sessionId || 'default',
        {
          hasRecentImages: options.hasRecentImages || false,
          chatContext: options.chatContext,
          requestType: options.requestType,
          userPreferences: options.userPreferences
        }
      );

      const qualityScore = semanticResult.quality_score || 5;
      const metaConfidence = semanticResult.enhanced_confidence || 0.7;
      const shouldUseSemantic = qualityScore > 6 && metaConfidence > 0.65;
      
      SmartLogger.integration(`üìä –ú–µ—Ç–∞-–∫–∞—á–µ—Å—Ç–≤–æ: ${qualityScore}/10, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${(metaConfidence * 100).toFixed(1)}%`);

      return {
        shouldUseSemantic,
        reason: shouldUseSemantic ? 'meta_semantic_analysis_success' : 'meta_semantic_quality_low',
        semanticResult,
        metaSemanticData: {
          qualityScore,
          metaConfidence,
          metaInsights: semanticResult.meta_insights,
          systemLearnings: semanticResult.system_learnings,
          recommendations: semanticResult.enhanced_recommendations,
          predictions: semanticResult.enhanced_predictions
        },
        processingTime: semanticResult.total_processing_time,
        fallbackMode: semanticResult.fallback_mode || false
      };

    } catch (error) {
      SmartLogger.integration(`‚ùå –û—à–∏–±–∫–∞ –º–µ—Ç–∞-—Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: ${error.message}`);
      return await this.performStandardSemanticAnalysis(userQuery, options);
    }
  }

  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
   */
  async performStandardSemanticAnalysis(userQuery, options) {
    try {
      const semanticResult = await semanticMemory.analyzeCompleteRequest(
        userQuery,
        options.sessionId || 'default',
        {
          hasRecentImages: options.hasRecentImages || false,
          chatContext: options.chatContext,
          requestType: options.requestType
        }
      );

      const confidence = semanticResult.confidence || 0.6;
      const projectRelevance = semanticResult.current_project ? 0.8 : 0.4;
      const overallConfidence = (confidence + projectRelevance) / 2;
      const shouldUseSemantic = overallConfidence > this.semanticThreshold / 100;

      return {
        shouldUseSemantic,
        reason: shouldUseSemantic ? 'semantic_analysis_success' : 'semantic_confidence_low',
        semanticResult,
        confidence: overallConfidence,
        processingTime: semanticResult.processing_time
      };

    } catch (error) {
      SmartLogger.integration(`‚ùå –û—à–∏–±–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: ${error.message}`);
      return { shouldUseSemantic: false, reason: 'semantic_error', error: error.message };
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç–≤–µ—Ç
   */
  async createSemanticResponse(semanticResult, userQuery, options) {
    SmartLogger.integration('üé® –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç–≤–µ—Ç–∞');

    try {
      let response = '';
      
      // –ï—Å–ª–∏ –µ—Å—Ç—å –º–µ—Ç–∞-—Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
      if (semanticResult.meta_semantic) {
        response = await this.createMetaSemanticResponse(semanticResult, userQuery, options);
      } else {
        response = await this.createStandardSemanticResponse(semanticResult, userQuery, options);
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
      if (semanticResult.enhanced_predictions || semanticResult.predictions) {
        const suggestions = await this.addProactiveSuggestions(
          semanticResult.enhanced_predictions || semanticResult.predictions
        );
        response += suggestions;
      }

      return { success: true, response, semanticData: semanticResult };

    } catch (error) {
      SmartLogger.integration(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞: ${error.message}`);
      return { success: false, error: error.message };
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –º–µ—Ç–∞-—Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç–≤–µ—Ç
   */
  async createMetaSemanticResponse(semanticResult, userQuery, options) {
    let response = `üß† –ú–µ—Ç–∞-—Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω.`;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—á–µ—Å—Ç–≤–µ
    if (semanticResult.quality_score) {
      response += `\nüìä –ö–∞—á–µ—Å—Ç–≤–æ –∞–Ω–∞–ª–∏–∑–∞: ${semanticResult.quality_score}/10`;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞-–∏–Ω—Å–∞–π—Ç—ã
    if (semanticResult.meta_insights && semanticResult.meta_insights.length > 0) {
      response += `\n\nüîÆ **–ú–µ—Ç–∞-–∏–Ω—Å–∞–π—Ç—ã**:`;
      semanticResult.meta_insights.forEach(insight => {
        response += `\n‚Ä¢ ${insight}`;
      });
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –æ–±—É—á–µ–Ω–∏—è
    if (semanticResult.system_learnings && semanticResult.system_learnings.length > 0) {
      response += `\n\nüéì **–°–∏—Å—Ç–µ–º–Ω—ã–µ –æ–±—É—á–µ–Ω–∏—è**:`;
      semanticResult.system_learnings.forEach(learning => {
        response += `\n‚Ä¢ ${learning}`;
      });
    }

    return response;
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç–≤–µ—Ç
   */
  async createStandardSemanticResponse(semanticResult, userQuery, options) {
    let response = `üß† –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω.`;
    
    if (semanticResult.current_project) {
      response += `\nüìã –ü—Ä–æ–µ–∫—Ç: ${semanticResult.current_project.concept}`;
    }

    if (semanticResult.confidence) {
      response += `\nüìä –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${(semanticResult.confidence * 100).toFixed(1)}%`;
    }

    return response;
  }

  /**
   * –û–±–æ–≥–∞—â–∞–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç
   */
  async enrichStandardResponse(standardResponse, semanticData, options) {
    if (!semanticData) return standardResponse;

    let enrichedResponse = standardResponse;

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ–µ–∫—Ç–∞
    if (semanticData.current_project) {
      enrichedResponse += `\n\nüí° –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ–µ–∫—Ç–∞: ${semanticData.current_project.concept}`;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
    if (semanticData.predictions && semanticData.predictions.length > 0) {
      const topPrediction = semanticData.predictions[0];
      enrichedResponse += `\nüîÆ –í–æ–∑–º–æ–∂–Ω—ã–π —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥: ${topPrediction.description}`;
    }

    return enrichedResponse;
  }

  /**
   * –î–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
   */
  async addProactiveSuggestions(predictions) {
    if (!predictions || predictions.length === 0) return '';

    const topPredictions = predictions.slice(0, 2);
    let suggestions = '\n\nüîÆ **–í–æ–∑–º–æ–∂–Ω—ã–µ —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏**:';
    
    topPredictions.forEach((prediction, index) => {
      const message = prediction.message || prediction.description || '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è';
      const probability = prediction.probability ? ` (${Math.round(prediction.probability * 100)}%)` : '';
      suggestions += `\n${index + 1}Ô∏è‚É£ ${message}${probability}`;
    });

    return suggestions;
  }

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
   */
  extractCategoryFromSemantic(semanticResult) {
    if (semanticResult.category) return semanticResult.category;
    if (semanticResult.current_project && semanticResult.current_project.type) {
      return this.mapProjectTypeToCategory(semanticResult.current_project.type);
    }
    return null;
  }

  /**
   * –ú–∞–ø–∏—Ç —Ç–∏–ø –ø—Ä–æ–µ–∫—Ç–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
   */
  mapProjectTypeToCategory(projectType) {
    const mapping = {
      'branding': 'image_generation',
      'logo_design': 'image_generation',
      'vectorization': 'vectorization',
      'image_editing': 'image_editing',
      'embroidery': 'embroidery'
    };
    return mapping[projectType] || 'conversation';
  }

  // –ú–µ—Ç–æ–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
  setSemanticThreshold(threshold) { this.semanticThreshold = threshold; }
  enableSemantic() { this.enabled = true; }
  disableSemantic() { this.enabled = false; }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
const metaSemanticIntegrationLayer = new MetaSemanticIntegrationLayer();

module.exports = {
  // –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã
  analyzeWithSemantics: metaSemanticIntegrationLayer.analyzeWithSemantics.bind(metaSemanticIntegrationLayer),
  createSemanticResponse: metaSemanticIntegrationLayer.createSemanticResponse.bind(metaSemanticIntegrationLayer),
  enrichStandardResponse: metaSemanticIntegrationLayer.enrichStandardResponse.bind(metaSemanticIntegrationLayer),
  
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
  extractCategoryFromSemantic: metaSemanticIntegrationLayer.extractCategoryFromSemantic.bind(metaSemanticIntegrationLayer),
  mapSemanticClusterToCategory: metaSemanticIntegrationLayer.extractCategoryFromSemantic.bind(metaSemanticIntegrationLayer),
  
  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
  setSemanticThreshold: metaSemanticIntegrationLayer.setSemanticThreshold.bind(metaSemanticIntegrationLayer),
  enableSemantic: metaSemanticIntegrationLayer.enableSemantic.bind(metaSemanticIntegrationLayer),
  disableSemantic: metaSemanticIntegrationLayer.disableSemantic.bind(metaSemanticIntegrationLayer),
  
  // –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
  MetaSemanticIntegrationLayer
};