
/**
 * üß†üé® –ò–ù–¢–ï–õ–õ–ï–ö–¢–£–ê–õ–¨–ù–´–ô –£–õ–£–ß–®–ê–¢–ï–õ–¨ POLLINATIONS.AI
 * –°–∏—Å—Ç–µ–º–∞ –¥–ª—è —Ä–∞–¥–∏–∫–∞–ª—å–Ω–æ–≥–æ —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
 * —á–µ—Ä–µ–∑ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑, –ø—Ä–æ–º–ø—Ç-–∏–Ω–∂–∏–Ω–∏—Ä–∏–Ω–≥ –∏ –∞–¥–∞–ø—Ç–∏–≤–Ω—É—é –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é
 */

const crypto = require('crypto');
const fs = require('fs').promises;
const path = require('path');

// –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–π —Å–∏—Å—Ç–µ–º–æ–π
let visualSemanticAnalyzer;
try {
  visualSemanticAnalyzer = require('./semantic-memory/visual-semantic-analyzer.cjs');
} catch (e) {
  console.warn('‚ö†Ô∏è –í–∏–∑—É–∞–ª—å–Ω—ã–π —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
}

// –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
const CACHE_DIR = path.join(__dirname, '..', 'cache', 'pollinations');
const ENHANCED_DIR = path.join(__dirname, '..', 'output', 'enhanced');

// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
async function ensureDirectories() {
  try {
    await fs.mkdir(CACHE_DIR, { recursive: true });
    await fs.mkdir(ENHANCED_DIR, { recursive: true });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π:', error);
  }
}

ensureDirectories();

/**
 * üìä –ê–ù–ê–õ–ò–ó–ê–¢–û–† –°–¢–ò–õ–ï–ô
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω—É–∂–Ω—ã–π —Å—Ç–∏–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
 */
class StyleAnalyzer {
  constructor() {
    this.stylePatterns = new Map();
    this.contextualRules = new Map();
    this.styleConfidenceThreshold = 0.7;
    
    this.initializeStylePatterns();
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ —Å—Ç–∏–ª–µ–π
   */
  initializeStylePatterns() {
    // –§–æ—Ç–æ—Ä–µ–∞–ª–∏–∑–º
    this.stylePatterns.set('photorealistic', {
      keywords: ['—Ñ–æ—Ç–æ', '—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π', '—á–µ–ª–æ–≤–µ–∫', '–ø–æ—Ä—Ç—Ä–µ—Ç', '–Ω–∞—Å—Ç–æ—è—â–∏–π', '–∂–∏–∑–Ω–µ–Ω–Ω—ã–π'],
      antiKeywords: ['–ø—Ä–∏–Ω—Ç', '–ª–æ–≥–æ—Ç–∏–ø', '–≤—ã—à–∏–≤–∫–∞', '–≤–µ–∫—Ç–æ—Ä–Ω—ã–π', '–º—É–ª—å—Ç—è—à–Ω—ã–π'],
      modifiers: [
        'hyperrealistic', 'photorealistic', 'detailed skin texture', 
        'natural proportions', 'professional photography', 'studio lighting',
        'authentic materials', 'lifelike details', 'real world lighting'
      ],
      qualityBoosts: ['8k resolution', 'ultra detailed', 'sharp focus'],
      confidence: 0.9
    });

    // –í–µ–∫—Ç–æ—Ä–Ω–∞—è –≥—Ä–∞—Ñ–∏–∫–∞
    this.stylePatterns.set('vector', {
      keywords: ['–ø—Ä–∏–Ω—Ç', '—Ñ—É—Ç–±–æ–ª–∫–∞', '–ª–æ–≥–æ—Ç–∏–ø', '–¥–∏–∑–∞–π–Ω', '–≥—Ä–∞—Ñ–∏–∫–∞', '–∏–∫–æ–Ω–∫–∞'],
      antiKeywords: ['—Ñ–æ—Ç–æ', '—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π', '–≤—ã—à–∏–≤–∫–∞', '—Ç–µ–∫—Å—Ç—É—Ä–∞'],
      modifiers: [
        'vector art style', 'clean lines', 'bold graphics', 'flat design',
        'limited color palette', 'high contrast', 'geometric shapes',
        'scalable graphics', 'crisp edges'
      ],
      qualityBoosts: ['print ready', 'scalable vector', 'clean design'],
      confidence: 0.85
    });

    // –í—ã—à–∏–≤–∫–∞
    this.stylePatterns.set('embroidery', {
      keywords: ['–≤—ã—à–∏–≤–∫–∞', '–≤—ã—à–∏–≤–∫—É', 'embroidery', '–Ω–∏—Ç–∫–∏', '—Ç–∫–∞–Ω—å'],
      antiKeywords: ['—Ñ–æ—Ç–æ', '–ø—Ä–∏–Ω—Ç', '—Ñ—É—Ç–±–æ–ª–∫–∞'],
      modifiers: [
        'embroidery design pattern', 'machine embroidery ready', 
        'clear defined areas', 'limited color palette', 'flat colors',
        'no gradients', 'simplified shapes', 'textile art style',
        'needlework pattern'
      ],
      qualityBoosts: ['embroidery friendly', 'stitch ready', 'thread colors'],
      confidence: 0.95
    });

    // –•—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Å—Ç–∏–ª—å
    this.stylePatterns.set('artistic', {
      keywords: ['—Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π', '–∏—Å–∫—É—Å—Å—Ç–≤–æ', '–∂–∏–≤–æ–ø–∏—Å—å', '–∫–∞—Ä—Ç–∏–Ω–∞', '—Ç–≤–æ—Ä—á–µ—Å–∫–∏–π'],
      antiKeywords: ['—Ñ–æ—Ç–æ', '–ø—Ä–∏–Ω—Ç', '–ª–æ–≥–æ—Ç–∏–ø'],
      modifiers: [
        'artistic painting style', 'fine art', 'painterly', 'expressive brushstrokes',
        'artistic interpretation', 'creative composition', 'art gallery quality'
      ],
      qualityBoosts: ['masterpiece', 'artistic excellence', 'gallery worthy'],
      confidence: 0.8
    });
  }

  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å—Ç–∏–ª—å
   */
  analyzeStyle(prompt, context = {}) {
    const analysis = {
      detectedStyle: 'photorealistic',
      confidence: 0.5,
      reasoning: [],
      appliedModifiers: [],
      qualityBoosts: []
    };

    let maxConfidence = 0;
    let bestStyle = 'photorealistic';

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Å—Ç–∏–ª—å
    for (const [styleName, styleData] of this.stylePatterns) {
      let confidence = 0;
      const reasoning = [];

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
      const keywordMatches = styleData.keywords.filter(keyword => 
        prompt.toLowerCase().includes(keyword)
      ).length;
      
      if (keywordMatches > 0) {
        confidence += keywordMatches * 0.3;
        reasoning.push(`–Ω–∞–π–¥–µ–Ω–æ ${keywordMatches} –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è ${styleName}`);
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω—Ç–∏-–∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ (—Å–Ω–∏–∂–∞—é—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å)
      const antiKeywordMatches = styleData.antiKeywords.filter(keyword => 
        prompt.toLowerCase().includes(keyword)
      ).length;
      
      if (antiKeywordMatches > 0) {
        confidence -= antiKeywordMatches * 0.2;
        reasoning.push(`–Ω–∞–π–¥–µ–Ω–æ ${antiKeywordMatches} –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏—Ö —Å–ª–æ–≤`);
      }

      // –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑
      if (context.hasRecentImages) {
        if (context.lastImageStyle === styleName) {
          confidence += 0.2;
          reasoning.push('—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç–∏–ª—é –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
        }
      }

      // –ü—Ä–æ–µ–∫—Ç-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
      if (context.projectType) {
        if (styleName === 'vector' && context.projectType === 'print_design') {
          confidence += 0.3;
          reasoning.push('—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–∏–ø—É –ø—Ä–æ–µ–∫—Ç–∞');
        }
        if (styleName === 'embroidery' && context.projectType === 'embroidery_design') {
          confidence += 0.4;
          reasoning.push('—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–∏–ø—É –ø—Ä–æ–µ–∫—Ç–∞');
        }
      }

      // –£—á–∏—Ç—ã–≤–∞–µ–º –±–∞–∑–æ–≤—É—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å —Å—Ç–∏–ª—è
      confidence *= styleData.confidence;

      if (confidence > maxConfidence) {
        maxConfidence = confidence;
        bestStyle = styleName;
        analysis.reasoning = reasoning;
      }
    }

    analysis.detectedStyle = bestStyle;
    analysis.confidence = maxConfidence;
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å—Ç–∏–ª—è
    const styleData = this.stylePatterns.get(bestStyle);
    analysis.appliedModifiers = styleData.modifiers;
    analysis.qualityBoosts = styleData.qualityBoosts;

    return analysis;
  }
}

/**
 * üé® –¶–í–ï–¢–û–í–ê–Ø –°–ï–ú–ê–ù–¢–ò–ö–ê
 * –£–º–Ω—ã–π –ø–æ–¥–±–æ—Ä —Ü–≤–µ—Ç–æ–≤—ã—Ö –ø–∞–ª–∏—Ç—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç–º–æ—Ü–∏–π –∏ —Ü–µ–ª–µ–π
 */
class ColorSemantics {
  constructor() {
    this.emotionalPalettes = new Map();
    this.purposePalettes = new Map();
    this.brandPalettes = new Map();
    
    this.initializeColorSemantics();
  }

  initializeColorSemantics() {
    // –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–∞–ª–∏—Ç—Ä—ã
    this.emotionalPalettes.set('energetic', {
      colors: ['vibrant red', 'electric blue', 'bright orange', 'neon yellow'],
      modifiers: ['high saturation', 'bold colors', 'dynamic contrast'],
      emotions: ['energy', 'excitement', 'passion', 'power']
    });

    this.emotionalPalettes.set('calming', {
      colors: ['soft blue', 'gentle green', 'warm beige', 'light gray'],
      modifiers: ['muted tones', 'soft colors', 'harmonious palette'],
      emotions: ['peace', 'tranquility', 'relaxation', 'comfort']
    });

    this.emotionalPalettes.set('professional', {
      colors: ['navy blue', 'charcoal gray', 'white', 'silver'],
      modifiers: ['corporate colors', 'professional palette', 'business appropriate'],
      emotions: ['trust', 'reliability', 'competence', 'authority']
    });

    this.emotionalPalettes.set('creative', {
      colors: ['purple', 'teal', 'coral', 'gold'],
      modifiers: ['artistic colors', 'creative palette', 'inspiring tones'],
      emotions: ['creativity', 'innovation', 'inspiration', 'uniqueness']
    });

    // –¶–µ–ª–µ–≤—ã–µ –ø–∞–ª–∏—Ç—Ä—ã
    this.purposePalettes.set('logo_design', {
      colors: ['strong primary', 'accent color', 'neutral base'],
      modifiers: ['brand colors', 'memorable palette', 'scalable colors'],
      characteristics: ['simple', 'distinctive', 'memorable']
    });

    this.purposePalettes.set('t_shirt_print', {
      colors: ['maximum 5 colors', 'high contrast', 'print-safe colors'],
      modifiers: ['screen printing ready', 'solid colors only', 'no gradients'],
      characteristics: ['bold', 'simple', 'cost-effective']
    });

    this.purposePalettes.set('embroidery', {
      colors: ['thread-available colors', 'limited palette', 'solid colors'],
      modifiers: ['embroidery thread colors', 'machine compatible', 'flat colors'],
      characteristics: ['simple', 'defined', 'stitch-friendly']
    });
  }

  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ü–≤–µ—Ç–æ–≤—ã–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏
   */
  analyzeColorNeeds(prompt, style, emotionalContext = {}) {
    const analysis = {
      recommendedPalette: [],
      colorModifiers: [],
      emotionalAlignment: [],
      purposeAlignment: [],
      restrictions: []
    };

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
    let detectedEmotion = 'professional'; // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    const emotionalWords = {
      'energetic': ['—ç–Ω–µ—Ä–≥–∏—è', '–¥–∏–Ω–∞–º–∏–∫–∞', '–º–æ—â—å', '—Å–∏–ª–∞', '–∞–∫—Ç–∏–≤–Ω—ã–π'],
      'calming': ['—Å–ø–æ–∫–æ–π–Ω—ã–π', '–º–∏—Ä–Ω—ã–π', '—Ä–∞—Å—Å–ª–∞–±–ª—è—é—â–∏–π', '–Ω–µ–∂–Ω—ã–π'],
      'professional': ['–¥–µ–ª–æ–≤–æ–π', '–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π', '–∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π', '—Å–µ—Ä—å–µ–∑–Ω—ã–π'],
      'creative': ['—Ç–≤–æ—Ä—á–µ—Å–∫–∏–π', '–∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π', '—Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π', '—É–Ω–∏–∫–∞–ª—å–Ω—ã–π']
    };

    for (const [emotion, words] of Object.entries(emotionalWords)) {
      if (words.some(word => prompt.toLowerCase().includes(word))) {
        detectedEmotion = emotion;
        break;
      }
    }

    // –ü—Ä–∏–º–µ–Ω—è–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –ø–∞–ª–∏—Ç—Ä—É
    if (this.emotionalPalettes.has(detectedEmotion)) {
      const palette = this.emotionalPalettes.get(detectedEmotion);
      analysis.recommendedPalette.push(...palette.colors);
      analysis.colorModifiers.push(...palette.modifiers);
      analysis.emotionalAlignment = palette.emotions;
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    let detectedPurpose = null;
    
    if (style === 'vector' && prompt.includes('–ø—Ä–∏–Ω—Ç')) {
      detectedPurpose = 't_shirt_print';
    } else if (style === 'embroidery') {
      detectedPurpose = 'embroidery';
    } else if (prompt.includes('–ª–æ–≥–æ—Ç–∏–ø')) {
      detectedPurpose = 'logo_design';
    }

    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–µ–ª–µ–≤—É—é –ø–∞–ª–∏—Ç—Ä—É
    if (detectedPurpose && this.purposePalettes.has(detectedPurpose)) {
      const purposePalette = this.purposePalettes.get(detectedPurpose);
      analysis.recommendedPalette.push(...purposePalette.colors);
      analysis.colorModifiers.push(...purposePalette.modifiers);
      analysis.purposeAlignment = purposePalette.characteristics;
      
      // –î–æ–±–∞–≤–ª—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
      if (detectedPurpose === 't_shirt_print') {
        analysis.restrictions.push('no gradients', 'solid colors only', 'maximum 5 colors');
      } else if (detectedPurpose === 'embroidery') {
        analysis.restrictions.push('no gradients', 'limited color palette', 'thread-safe colors');
      }
    }

    return analysis;
  }
}

/**
 * üèóÔ∏è –ö–û–ú–ü–û–ó–ò–¶–ò–û–ù–ù–ê–Ø –°–ï–ú–ê–ù–¢–ò–ö–ê
 * –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è
 */
class CompositionSemantics {
  constructor() {
    this.compositionRules = new Map();
    this.impactStrategies = new Map();
    
    this.initializeCompositionRules();
  }

  initializeCompositionRules() {
    // –ü—Ä–∞–≤–∏–ª–∞ –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ü–µ–ª–µ–π
    this.compositionRules.set('logo', {
      principles: ['centered composition', 'balanced elements', 'clear hierarchy'],
      modifiers: ['symmetrical layout', 'focal point center', 'clean spacing'],
      avoidance: ['complex backgrounds', 'multiple focal points', 'cluttered design']
    });

    this.compositionRules.set('t_shirt_print', {
      principles: ['strong focal point', 'balanced composition', 'print area optimization'],
      modifiers: ['centered design', 'chest placement ready', 'scalable composition'],
      avoidance: ['edge bleeding', 'too much detail', 'weak contrast']
    });

    this.compositionRules.set('embroidery', {
      principles: ['simple composition', 'clear areas', 'stitch-friendly layout'],
      modifiers: ['defined regions', 'no overlapping elements', 'embroidery optimized'],
      avoidance: ['complex intersections', 'thin lines', 'gradual transitions']
    });

    this.compositionRules.set('artistic', {
      principles: ['dynamic composition', 'visual flow', 'emotional impact'],
      modifiers: ['rule of thirds', 'leading lines', 'visual hierarchy'],
      avoidance: ['static composition', 'centered everything', 'lack of movement']
    });

    // –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è
    this.impactStrategies.set('maximum_attention', {
      techniques: ['high contrast', 'bold elements', 'dynamic angles'],
      composition: 'asymmetrical with strong focal point',
      colors: 'high saturation and contrast'
    });

    this.impactStrategies.set('professional_trust', {
      techniques: ['balanced layout', 'clean lines', 'structured composition'],
      composition: 'symmetrical and organized',
      colors: 'professional color scheme'
    });

    this.impactStrategies.set('emotional_connection', {
      techniques: ['soft transitions', 'organic shapes', 'warm lighting'],
      composition: 'flowing and natural',
      colors: 'emotionally resonant palette'
    });
  }

  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–º–ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏
   */
  analyzeComposition(prompt, style, purpose) {
    const analysis = {
      recommendedComposition: [],
      impactStrategy: 'professional_trust',
      compositionModifiers: [],
      layoutPrinciples: [],
      avoidanceRules: []
    };

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∏–ª—è
    let compositionType = 'artistic';
    
    if (style === 'vector' && prompt.includes('–ª–æ–≥–æ—Ç–∏–ø')) {
      compositionType = 'logo';
    } else if (style === 'vector' && prompt.includes('–ø—Ä–∏–Ω—Ç')) {
      compositionType = 't_shirt_print';
    } else if (style === 'embroidery') {
      compositionType = 'embroidery';
    }

    // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª–∞ –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏
    if (this.compositionRules.has(compositionType)) {
      const rules = this.compositionRules.get(compositionType);
      analysis.layoutPrinciples = rules.principles;
      analysis.compositionModifiers = rules.modifiers;
      analysis.avoidanceRules = rules.avoidance;
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è
    if (prompt.includes('–≤–Ω–∏–º–∞–Ω–∏–µ') || prompt.includes('—è—Ä–∫–∏–π') || prompt.includes('–∑–∞–º–µ—Ç–Ω—ã–π')) {
      analysis.impactStrategy = 'maximum_attention';
    } else if (prompt.includes('–¥–µ–ª–æ–≤–æ–π') || prompt.includes('–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π')) {
      analysis.impactStrategy = 'professional_trust';
    } else if (prompt.includes('—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π') || prompt.includes('—Ç—Ä–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π')) {
      analysis.impactStrategy = 'emotional_connection';
    }

    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è
    if (this.impactStrategies.has(analysis.impactStrategy)) {
      const strategy = this.impactStrategies.get(analysis.impactStrategy);
      analysis.recommendedComposition.push(strategy.composition);
      analysis.compositionModifiers.push(...strategy.techniques);
    }

    return analysis;
  }
}

/**
 * üéØ –ê–ù–ê–õ–ò–ó–ê–¢–û–† –ù–ê–ú–ï–†–ï–ù–ò–ô
 * –ü–æ–Ω–∏–º–∞–µ—Ç, —á—Ç–æ –∏–º–µ–Ω–Ω–æ —Ö–æ—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
 */
class IntentionAnalyzer {
  constructor() {
    this.intentPatterns = new Map();
    this.contextualClues = new Map();
    
    this.initializeIntentPatterns();
  }

  initializeIntentPatterns() {
    // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –Ω–∞–º–µ—Ä–µ–Ω–∏–π
    this.intentPatterns.set('logo_creation', {
      keywords: ['–ª–æ–≥–æ—Ç–∏–ø', '–ª–æ–≥–æ', '–±—Ä–µ–Ω–¥', '–∫–æ–º–ø–∞–Ω–∏—è', '–º–∞—Ä–∫–∞'],
      indicators: ['–¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏', '–±—Ä–µ–Ω–¥–∞', '–ª–æ–≥–æ—Ç–∏–ø –∫–æ–º–ø–∞–Ω–∏–∏'],
      confidence: 0.9,
      requirements: ['simple', 'memorable', 'scalable', 'professional']
    });

    this.intentPatterns.set('print_design', {
      keywords: ['–ø—Ä–∏–Ω—Ç', '—Ñ—É—Ç–±–æ–ª–∫–∞', '–ø–µ—á–∞—Ç—å', '–¥–∏–∑–∞–π–Ω –¥–ª—è –ø–µ—á–∞—Ç–∏'],
      indicators: ['–Ω–∞ —Ñ—É—Ç–±–æ–ª–∫—É', '–¥–ª—è –ø–µ—á–∞—Ç–∏', '–ø—Ä–∏–Ω—Ç –¥–∏–∑–∞–π–Ω'],
      confidence: 0.85,
      requirements: ['bold', 'high contrast', 'print ready', 'limited colors']
    });

    this.intentPatterns.set('embroidery_design', {
      keywords: ['–≤—ã—à–∏–≤–∫–∞', '–≤—ã—à–∏–≤–∫—É', 'embroidery', '–¥–ª—è –≤—ã—à–∏–≤–∫–∏'],
      indicators: ['–≤—ã—à–∏–≤–∞–ª—å–Ω–∞—è –º–∞—à–∏–Ω–∞', '–Ω–∏—Ç–∫–∏', '—Å—Ç–µ–∂–∫–∏'],
      confidence: 0.95,
      requirements: ['simple shapes', 'clear areas', 'limited colors', 'no gradients']
    });

    this.intentPatterns.set('illustration', {
      keywords: ['–∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è', '—Ä–∏—Å—É–Ω–æ–∫', '–∫–∞—Ä—Ç–∏–Ω–∫–∞', '–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'],
      indicators: ['—Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π', '–∫—Ä–∞—Å–∏–≤—ã–π', '–¥–µ—Ç–∞–ª—å–Ω—ã–π'],
      confidence: 0.7,
      requirements: ['artistic', 'detailed', 'expressive', 'creative']
    });

    this.intentPatterns.set('icon_design', {
      keywords: ['–∏–∫–æ–Ω–∫–∞', '–∑–Ω–∞—á–æ–∫', '—Å–∏–º–≤–æ–ª', '–ø–∏–∫—Ç–æ–≥—Ä–∞–º–º–∞'],
      indicators: ['–¥–ª—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞', 'UI', '–≤–µ–±-–¥–∏–∑–∞–π–Ω'],
      confidence: 0.8,
      requirements: ['simple', 'clear', 'recognizable', 'minimal']
    });
  }

  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–∞–º–µ—Ä–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  analyzeIntention(prompt, context = {}) {
    const analysis = {
      primaryIntention: 'illustration',
      confidence: 0.5,
      detectedIntentions: [],
      requirements: [],
      reasoning: []
    };

    let maxConfidence = 0;
    let bestIntention = 'illustration';

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–µ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ
    for (const [intentionName, intentionData] of this.intentPatterns) {
      let confidence = 0;
      const reasoning = [];

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
      const keywordMatches = intentionData.keywords.filter(keyword => 
        prompt.toLowerCase().includes(keyword)
      ).length;
      
      if (keywordMatches > 0) {
        confidence += keywordMatches * 0.4;
        reasoning.push(`–Ω–∞–π–¥–µ–Ω–æ ${keywordMatches} –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤`);
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
      const indicatorMatches = intentionData.indicators.filter(indicator => 
        prompt.toLowerCase().includes(indicator)
      ).length;
      
      if (indicatorMatches > 0) {
        confidence += indicatorMatches * 0.3;
        reasoning.push(`–Ω–∞–π–¥–µ–Ω–æ ${indicatorMatches} –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤`);
      }

      // –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑
      if (context.projectHistory) {
        const similarProjects = context.projectHistory.filter(project => 
          project.intention === intentionName
        ).length;
        
        if (similarProjects > 0) {
          confidence += Math.min(similarProjects * 0.1, 0.2);
          reasoning.push(`–ø–æ—Ö–æ–∂–∏–µ –ø—Ä–æ–µ–∫—Ç—ã –≤ –∏—Å—Ç–æ—Ä–∏–∏: ${similarProjects}`);
        }
      }

      // –£—á–∏—Ç—ã–≤–∞–µ–º –±–∞–∑–æ–≤—É—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
      confidence *= intentionData.confidence;

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –Ω–∞–º–µ—Ä–µ–Ω–∏—è
      if (confidence > 0.3) {
        analysis.detectedIntentions.push({
          intention: intentionName,
          confidence,
          reasoning: [...reasoning]
        });
      }

      if (confidence > maxConfidence) {
        maxConfidence = confidence;
        bestIntention = intentionName;
        analysis.reasoning = reasoning;
      }
    }

    analysis.primaryIntention = bestIntention;
    analysis.confidence = maxConfidence;
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –Ω–∞–º–µ—Ä–µ–Ω–∏—è
    const intentionData = this.intentPatterns.get(bestIntention);
    analysis.requirements = intentionData.requirements;

    return analysis;
  }
}

/**
 * üìù –°–¢–ò–õ–ï–í–û–ô –ü–ï–†–ï–í–û–î–ß–ò–ö
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –¥–ª—è –Ω—É–∂–Ω–æ–≥–æ —Å—Ç–∏–ª—è
 */
class StyleTranslator {
  constructor() {
    this.translationRules = new Map();
    this.contextualModifiers = new Map();
    
    this.initializeTranslationRules();
  }

  initializeTranslationRules() {
    // –ü—Ä–∞–≤–∏–ª–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—Ç–∏–ª–µ–π
    this.translationRules.set('photorealistic', {
      baseModifiers: [
        'hyperrealistic', 'photorealistic', 'detailed skin texture',
        'natural proportions', 'professional photography', 'studio lighting'
      ],
      qualityEnhancers: [
        '8k resolution', 'ultra detailed', 'sharp focus', 'professional quality'
      ],
      lightingModifiers: [
        'natural lighting', 'soft shadows', 'realistic reflections'
      ]
    });

    this.translationRules.set('vector', {
      baseModifiers: [
        'vector art style', 'clean lines', 'bold graphics', 'flat design',
        'limited color palette', 'high contrast'
      ],
      qualityEnhancers: [
        'print ready', 'scalable vector', 'crisp edges', 'professional design'
      ],
      compositionModifiers: [
        'geometric shapes', 'simple composition', 'clear hierarchy'
      ]
    });

    this.translationRules.set('embroidery', {
      baseModifiers: [
        'embroidery design pattern', 'machine embroidery ready',
        'clear defined areas', 'limited color palette', 'flat colors'
      ],
      qualityEnhancers: [
        'embroidery friendly', 'stitch ready', 'thread colors', 'textile art'
      ],
      restrictionModifiers: [
        'no gradients', 'simplified shapes', 'no overlapping elements'
      ]
    });
  }

  /**
   * –ü–µ—Ä–µ–≤–æ–¥–∏—Ç –ø—Ä–æ–º–ø—Ç —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —Å—Ç–∏–ª–µ–≤—ã—Ö –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤
   */
  translatePrompt(prompt, style, intention, colorAnalysis, compositionAnalysis) {
    let enhancedPrompt = prompt;

    // –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã —Å—Ç–∏–ª—è
    if (this.translationRules.has(style)) {
      const rules = this.translationRules.get(style);
      
      // –ë–∞–∑–æ–≤—ã–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã
      const baseModifiers = rules.baseModifiers.slice(0, 3).join(', ');
      enhancedPrompt = `${baseModifiers}, ${enhancedPrompt}`;
      
      // –ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –∫–∞—á–µ—Å—Ç–≤–∞
      const qualityModifiers = rules.qualityEnhancers.slice(0, 2).join(', ');
      enhancedPrompt = `${enhancedPrompt}, ${qualityModifiers}`;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Ü–≤–µ—Ç–æ–≤—ã–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã
    if (colorAnalysis.colorModifiers.length > 0) {
      const colorMods = colorAnalysis.colorModifiers.slice(0, 2).join(', ');
      enhancedPrompt = `${enhancedPrompt}, ${colorMods}`;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã
    if (compositionAnalysis.compositionModifiers.length > 0) {
      const compMods = compositionAnalysis.compositionModifiers.slice(0, 2).join(', ');
      enhancedPrompt = `${enhancedPrompt}, ${compMods}`;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –Ω–∞–º–µ—Ä–µ–Ω–∏—è
    if (intention.requirements.length > 0) {
      const intentMods = intention.requirements.slice(0, 2).join(', ');
      enhancedPrompt = `${enhancedPrompt}, ${intentMods}`;
    }

    // –û—á–∏—â–∞–µ–º –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º
    enhancedPrompt = this.cleanupPrompt(enhancedPrompt);

    return enhancedPrompt;
  }

  /**
   * –û—á–∏—â–∞–µ—Ç –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ–º–ø—Ç
   */
  cleanupPrompt(prompt) {
    return prompt
      .replace(/\s+/g, ' ')
      .replace(/,+/g, ',')
      .replace(/^,|,$/, '')
      .trim();
  }
}

/**
 * üîÆ –ü–†–ï–î–ò–ö–¢–û–† –ö–ê–ß–ï–°–¢–í–ê
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ–º–ø—Ç –∏ –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
 */
class QualityPredictor {
  constructor() {
    this.qualityFactors = new Map();
    this.predictionModel = new Map();
    
    this.initializeQualityFactors();
  }

  initializeQualityFactors() {
    // –§–∞–∫—Ç–æ—Ä—ã –∫–∞—á–µ—Å—Ç–≤–∞
    this.qualityFactors.set('prompt_clarity', {
      weight: 0.3,
      calculator: (prompt) => {
        const words = prompt.split(' ').length;
        const clarity = Math.min(words / 20, 1) * 0.7 + 
                       (prompt.includes('–¥–µ—Ç–∞–ª—å–Ω—ã–π') ? 0.3 : 0);
        return Math.min(clarity, 1);
      }
    });

    this.qualityFactors.set('style_consistency', {
      weight: 0.25,
      calculator: (prompt, style) => {
        const styleKeywords = {
          'photorealistic': ['—Ñ–æ—Ç–æ', '—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π', '–ø–æ—Ä—Ç—Ä–µ—Ç'],
          'vector': ['–ø—Ä–∏–Ω—Ç', '–ª–æ–≥–æ—Ç–∏–ø', '–¥–∏–∑–∞–π–Ω'],
          'embroidery': ['–≤—ã—à–∏–≤–∫–∞', '–Ω–∏—Ç–∫–∏']
        };
        
        const relevantKeywords = styleKeywords[style] || [];
        const matches = relevantKeywords.filter(kw => prompt.includes(kw)).length;
        return Math.min(matches / relevantKeywords.length, 1);
      }
    });

    this.qualityFactors.set('technical_requirements', {
      weight: 0.2,
      calculator: (prompt, style, requirements) => {
        let score = 0.5; // –±–∞–∑–æ–≤—ã–π
        
        if (requirements.includes('simple') && prompt.includes('–ø—Ä–æ—Å—Ç–æ–π')) score += 0.2;
        if (requirements.includes('detailed') && prompt.includes('–¥–µ—Ç–∞–ª—å–Ω—ã–π')) score += 0.2;
        if (requirements.includes('professional') && prompt.includes('–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π')) score += 0.1;
        
        return Math.min(score, 1);
      }
    });

    this.qualityFactors.set('color_specification', {
      weight: 0.15,
      calculator: (prompt, colorAnalysis) => {
        let score = 0.3; // –±–∞–∑–æ–≤—ã–π
        
        if (colorAnalysis.recommendedPalette.length > 0) score += 0.3;
        if (colorAnalysis.restrictions.length > 0) score += 0.2;
        if (prompt.match(/—Ü–≤–µ—Ç|color/g)) score += 0.2;
        
        return Math.min(score, 1);
      }
    });

    this.qualityFactors.set('composition_clarity', {
      weight: 0.1,
      calculator: (prompt, compositionAnalysis) => {
        let score = 0.4; // –±–∞–∑–æ–≤—ã–π
        
        if (compositionAnalysis.layoutPrinciples.length > 0) score += 0.3;
        if (prompt.includes('—Ü–µ–Ω—Ç—Ä') || prompt.includes('–∫–æ–º–ø–æ–∑–∏—Ü–∏—è')) score += 0.3;
        
        return Math.min(score, 1);
      }
    });
  }

  /**
   * –ü—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
   */
  predictQuality(prompt, style, intention, colorAnalysis, compositionAnalysis) {
    let totalScore = 0;
    const factorScores = {};

    // –í—ã—á–∏—Å–ª—è–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–∫—Ç–æ—Ä
    for (const [factorName, factor] of this.qualityFactors) {
      let score = 0;
      
      switch (factorName) {
        case 'prompt_clarity':
          score = factor.calculator(prompt);
          break;
        case 'style_consistency':
          score = factor.calculator(prompt, style);
          break;
        case 'technical_requirements':
          score = factor.calculator(prompt, style, intention.requirements);
          break;
        case 'color_specification':
          score = factor.calculator(prompt, colorAnalysis);
          break;
        case 'composition_clarity':
          score = factor.calculator(prompt, compositionAnalysis);
          break;
      }
      
      factorScores[factorName] = score;
      totalScore += score * factor.weight;
    }

    const prediction = {
      overallScore: totalScore,
      confidence: this.calculateConfidence(factorScores),
      factorBreakdown: factorScores,
      recommendations: this.generateRecommendations(factorScores),
      expectedIssues: this.predictIssues(factorScores)
    };

    return prediction;
  }

  /**
   * –í—ã—á–∏—Å–ª—è–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–∏
   */
  calculateConfidence(factorScores) {
    const scores = Object.values(factorScores);
    const variance = this.calculateVariance(scores);
    const avgScore = scores.reduce((sum, score) => sum + score, 0) / scores.length;
    
    // –í—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –ø—Ä–∏ –Ω–∏–∑–∫–æ–π –¥–∏—Å–ø–µ—Ä—Å–∏–∏ –∏ –≤—ã—Å–æ–∫–æ–º —Å—Ä–µ–¥–Ω–µ–º
    return Math.max(0, Math.min(1, avgScore - variance));
  }

  /**
   * –í—ã—á–∏—Å–ª—è–µ—Ç –¥–∏—Å–ø–µ—Ä—Å–∏—é
   */
  calculateVariance(scores) {
    const mean = scores.reduce((sum, score) => sum + score, 0) / scores.length;
    const squaredDiffs = scores.map(score => Math.pow(score - mean, 2));
    return squaredDiffs.reduce((sum, diff) => sum + diff, 0) / scores.length;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é
   */
  generateRecommendations(factorScores) {
    const recommendations = [];

    if (factorScores.prompt_clarity < 0.6) {
      recommendations.push('–î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π –≤ –æ–ø–∏—Å–∞–Ω–∏–µ');
    }

    if (factorScores.style_consistency < 0.5) {
      recommendations.push('–£—Ç–æ—á–Ω–∏—Ç–µ —Å—Ç–∏–ª—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
    }

    if (factorScores.color_specification < 0.5) {
      recommendations.push('–£–∫–∞–∂–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–µ —Ü–≤–µ—Ç–∞');
    }

    if (factorScores.composition_clarity < 0.6) {
      recommendations.push('–û–ø–∏—à–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –∫–æ–º–ø–æ–∑–∏—Ü–∏—é');
    }

    return recommendations;
  }

  /**
   * –ü—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
   */
  predictIssues(factorScores) {
    const issues = [];

    if (factorScores.technical_requirements < 0.4) {
      issues.push('–í–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏');
    }

    if (factorScores.style_consistency < 0.3) {
      issues.push('–°—Ç–∏–ª—å –º–æ–∂–µ—Ç –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –æ–∂–∏–¥–∞–Ω–∏—è–º');
    }

    return issues;
  }
}

/**
 * üîÑ –ú–£–õ–¨–¢–ò-–ì–ï–ù–ï–†–ê–¢–û–†
 * –°–æ–∑–¥–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏ –≤—ã–±–∏—Ä–∞–µ—Ç –ª—É—á—à–∏–π
 */
class MultiGenerator {
  constructor() {
    this.generationStrategies = new Map();
    this.selectionCriteria = new Map();
    
    this.initializeStrategies();
  }

  initializeStrategies() {
    // –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    this.generationStrategies.set('conservative', {
      description: '–ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥ —Å –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–º–∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞–º–∏',
      modifierIntensity: 0.7,
      riskLevel: 0.2
    });

    this.generationStrategies.set('balanced', {
      description: '–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥',
      modifierIntensity: 1.0,
      riskLevel: 0.5
    });

    this.generationStrategies.set('creative', {
      description: '–ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥ —Å —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–º–∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞–º–∏',
      modifierIntensity: 1.3,
      riskLevel: 0.8
    });
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
   */
  async generateMultipleVariants(basePrompt, enhancedPrompt, quality = 'ultra') {
    const variants = [];

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å —Ä–∞–∑–Ω—ã–º–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏
    for (const [strategyName, strategy] of this.generationStrategies) {
      const variantPrompt = this.applyStrategy(enhancedPrompt, strategy);
      const variantId = this.generateVariantId();
      
      try {
        const imageUrl = await this.generateSingleVariant(variantPrompt, variantId, quality);
        
        variants.push({
          id: variantId,
          strategy: strategyName,
          prompt: variantPrompt,
          imageUrl,
          score: 0, // –±—É–¥–µ—Ç –≤—ã—á–∏—Å–ª–µ–Ω –ø–æ–∑–∂–µ
          metadata: {
            modifierIntensity: strategy.modifierIntensity,
            riskLevel: strategy.riskLevel
          }
        });
      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞ ${strategyName}:`, error);
      }
    }

    return variants;
  }

  /**
   * –ü—Ä–∏–º–µ–Ω—è–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –∫ –ø—Ä–æ–º–ø—Ç—É
   */
  applyStrategy(prompt, strategy) {
    const intensity = strategy.modifierIntensity;
    
    if (intensity < 0.8) {
      // –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥ - —É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã
      return prompt.split(', ').slice(0, 8).join(', ');
    } else if (intensity > 1.2) {
      // –ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥ - –¥–æ–±–∞–≤–ª—è–µ–º —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã
      return `${prompt}, experimental style, artistic interpretation, unique approach`;
    }
    
    return prompt; // —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç
   */
  async generateSingleVariant(prompt, variantId, quality) {
    const { generateWithPollinations } = require('./ai-image-generator.js');
    return await generateWithPollinations(prompt, variantId, quality);
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç ID –≤–∞—Ä–∏–∞–Ω—Ç–∞
   */
  generateVariantId() {
    return `variant_${Date.now()}_${Math.random().toString(36).substring(2, 8)}`;
  }

  /**
   * –í—ã–±–∏—Ä–∞–µ—Ç –ª—É—á—à–∏–π –≤–∞—Ä–∏–∞–Ω—Ç
   */
  selectBestVariant(variants, selectionCriteria = {}) {
    if (variants.length === 0) return null;
    if (variants.length === 1) return variants[0];

    // –û—Ü–µ–Ω–∏–≤–∞–µ–º –∫–∞–∂–¥—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
    variants.forEach(variant => {
      variant.score = this.scoreVariant(variant, selectionCriteria);
    });

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –æ—Ü–µ–Ω–∫–µ
    variants.sort((a, b) => b.score - a.score);

    return {
      bestVariant: variants[0],
      allVariants: variants,
      selectionReasoning: this.generateSelectionReasoning(variants[0], selectionCriteria)
    };
  }

  /**
   * –û—Ü–µ–Ω–∏–≤–∞–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç
   */
  scoreVariant(variant, criteria) {
    let score = 0.5; // –±–∞–∑–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞

    // –û—Ü–µ–Ω–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    if (criteria.preferConservative && variant.strategy === 'conservative') {
      score += 0.3;
    } else if (criteria.preferCreative && variant.strategy === 'creative') {
      score += 0.3;
    } else if (variant.strategy === 'balanced') {
      score += 0.2; // —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—Å–µ–≥–¥–∞ –ø–æ–ª—É—á–∞–µ—Ç –±–æ–Ω—É—Å
    }

    // –®—Ç—Ä–∞—Ñ—ã –∑–∞ –≤—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–µ–Ω
    if (!criteria.allowHighRisk && variant.metadata.riskLevel > 0.7) {
      score -= 0.2;
    }

    return Math.max(0, Math.min(1, score));
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞
   */
  generateSelectionReasoning(selectedVariant, criteria) {
    const reasons = [];

    reasons.push(`–í—ã–±—Ä–∞–Ω –≤–∞—Ä–∏–∞–Ω—Ç —Å–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π "${selectedVariant.strategy}"`);
    reasons.push(`–û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞: ${selectedVariant.score.toFixed(2)}`);
    
    if (selectedVariant.metadata.riskLevel < 0.5) {
      reasons.push('–ù–∏–∑–∫–∏–π —Ä–∏—Å–∫ –æ—à–∏–±–æ–∫');
    }
    
    if (selectedVariant.strategy === 'balanced') {
      reasons.push('–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –∫–∞—á–µ—Å—Ç–≤–∞ –∏ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏');
    }

    return reasons;
  }
}

/**
 * üéõÔ∏è –ê–î–ê–ü–¢–ò–í–ù–´–ï –ü–ê–†–ê–ú–ï–¢–†–´
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–¥–±–æ—Ä —Ä–∞–∑–º–µ—Ä–∞, –∫–∞—á–µ—Å—Ç–≤–∞, seed'–∞
 */
class AdaptiveParameters {
  constructor() {
    this.parameterRules = new Map();
    this.contextualAdjustments = new Map();
    
    this.initializeParameterRules();
  }

  initializeParameterRules() {
    // –ü—Ä–∞–≤–∏–ª–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    this.parameterRules.set('logo', {
      preferredSizes: [
        { width: 1024, height: 1024, usage: 'square_logo' },
        { width: 1920, height: 1080, usage: 'banner_logo' },
        { width: 500, height: 500, usage: 'icon_logo' }
      ],
      qualitySettings: { model: 'flux-pro', enhance: true, quality: 'ultra' },
      aspectRatio: '1:1'
    });

    this.parameterRules.set('t_shirt_print', {
      preferredSizes: [
        { width: 3000, height: 3000, usage: 'high_quality_print' },
        { width: 2048, height: 2048, usage: 'standard_print' }
      ],
      qualitySettings: { model: 'flux-pro', enhance: true, quality: 'ultra' },
      aspectRatio: '1:1'
    });

    this.parameterRules.set('embroidery', {
      preferredSizes: [
        { width: 1024, height: 1024, usage: 'machine_embroidery' },
        { width: 800, height: 600, usage: 'rectangular_patch' }
      ],
      qualitySettings: { model: 'flux', enhance: true, quality: 'hd' },
      aspectRatio: 'flexible'
    });

    this.parameterRules.set('illustration', {
      preferredSizes: [
        { width: 2048, height: 2048, usage: 'high_detail' },
        { width: 1024, height: 1024, usage: 'standard' }
      ],
      qualitySettings: { model: 'flux-pro', enhance: true, quality: 'ultra' },
      aspectRatio: 'flexible'
    });
  }

  /**
   * –ü–æ–¥–±–∏—Ä–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
   */
  optimizeParameters(intention, style, context = {}) {
    const optimization = {
      size: { width: 1024, height: 1024 },
      quality: 'hd',
      model: 'flux',
      seed: this.generateOptimalSeed(context),
      enhance: true,
      additionalParams: {}
    };

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    let imageType = 'illustration';
    
    if (intention.primaryIntention === 'logo_creation') {
      imageType = 'logo';
    } else if (intention.primaryIntention === 'print_design') {
      imageType = 't_shirt_print';
    } else if (intention.primaryIntention === 'embroidery_design') {
      imageType = 'embroidery';
    }

    // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è —Ç–∏–ø–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if (this.parameterRules.has(imageType)) {
      const rules = this.parameterRules.get(imageType);
      
      // –í—ã–±–∏—Ä–∞–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ä–∞–∑–º–µ—Ä
      const sizeOption = this.selectBestSize(rules.preferredSizes, context);
      optimization.size = { width: sizeOption.width, height: sizeOption.height };
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
      Object.assign(optimization, rules.qualitySettings);
    }

    // –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏
    this.applyContextualAdjustments(optimization, context);

    return optimization;
  }

  /**
   * –í—ã–±–∏—Ä–∞–µ—Ç –ª—É—á—à–∏–π —Ä–∞–∑–º–µ—Ä
   */
  selectBestSize(sizeOptions, context) {
    // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–µ—Ä–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
    let selectedSize = sizeOptions[0];

    // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
    if (context.intendedUse) {
      const matchingSize = sizeOptions.find(size => 
        size.usage === context.intendedUse
      );
      if (matchingSize) {
        selectedSize = matchingSize;
      }
    }

    // –ï—Å–ª–∏ –µ—Å—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ —Ä–∞–∑–º–µ—Ä—É
    if (context.maxWidth && selectedSize.width > context.maxWidth) {
      selectedSize = sizeOptions.find(size => 
        size.width <= context.maxWidth
      ) || selectedSize;
    }

    return selectedSize;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π seed
   */
  generateOptimalSeed(context) {
    if (context.consistencyRequired && context.projectSeed) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º seed –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
      return context.projectSeed;
    }

    if (context.userPreferences && context.userPreferences.preferredSeed) {
      return context.userPreferences.preferredSeed;
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π seed
    return Date.now() + Math.floor(Math.random() * 1000);
  }

  /**
   * –ü—Ä–∏–º–µ–Ω—è–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏
   */
  applyContextualAdjustments(optimization, context) {
    // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    if (context.prioritizeSpeed) {
      optimization.model = 'flux';
      optimization.quality = 'standard';
      optimization.size.width = Math.min(optimization.size.width, 1024);
      optimization.size.height = Math.min(optimization.size.height, 1024);
    }

    // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
    if (context.prioritizeQuality) {
      optimization.model = 'flux-pro';
      optimization.quality = 'ultra';
      optimization.enhance = true;
    }

    // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –¥–ª—è –ø–µ—á–∞—Ç–∏
    if (context.forPrint) {
      optimization.size.width = Math.max(optimization.size.width, 2048);
      optimization.size.height = Math.max(optimization.size.height, 2048);
      optimization.quality = 'ultra';
    }
  }
}

/**
 * üè¢ –ë–†–ï–ù–î–ò–ù–ì–û–í–ê–Ø –°–û–ì–õ–ê–°–û–í–ê–ù–ù–û–°–¢–¨
 * –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –µ–¥–∏–Ω–æ–≥–æ —Å—Ç–∏–ª—è –≤ —Ä–∞–º–∫–∞—Ö –ø—Ä–æ–µ–∫—Ç–∞
 */
class BrandConsistency {
  constructor() {
    this.brandProfiles = new Map();
    this.styleMemory = new Map();
    this.consistencyRules = new Map();
    
    this.initializeConsistencyRules();
  }

  initializeConsistencyRules() {
    this.consistencyRules.set('color_palette', {
      importance: 0.9,
      enforcer: (currentPalette, brandPalette) => {
        return brandPalette.length > 0 ? brandPalette : currentPalette;
      }
    });

    this.consistencyRules.set('style_modifiers', {
      importance: 0.8,
      enforcer: (currentModifiers, brandModifiers) => {
        return [...new Set([...brandModifiers, ...currentModifiers])];
      }
    });

    this.consistencyRules.set('composition_principles', {
      importance: 0.7,
      enforcer: (currentPrinciples, brandPrinciples) => {
        return brandPrinciples.length > 0 ? brandPrinciples : currentPrinciples;
      }
    });
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –±—Ä–µ–Ω–¥–∞
   */
  createBrandProfile(projectId, brandData) {
    const profile = {
      projectId,
      colorPalette: brandData.colors || [],
      styleModifiers: brandData.modifiers || [],
      compositionPrinciples: brandData.composition || [],
      qualityStandards: brandData.quality || {},
      createdAt: Date.now(),
      updatedAt: Date.now(),
      imageHistory: []
    };

    this.brandProfiles.set(projectId, profile);
    return profile;
  }

  /**
   * –ü—Ä–∏–º–µ–Ω—è–µ—Ç –±—Ä–µ–Ω–¥–∏–Ω–≥–æ–≤—É—é —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å
   */
  applyBrandConsistency(projectId, analysis) {
    if (!this.brandProfiles.has(projectId)) {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
      this.createBrandProfile(projectId, {
        colors: analysis.colorAnalysis.recommendedPalette,
        modifiers: analysis.styleAnalysis.appliedModifiers,
        composition: analysis.compositionAnalysis.layoutPrinciples
      });
      return analysis; // –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç
    }

    const brandProfile = this.brandProfiles.get(projectId);
    const consistentAnalysis = { ...analysis };

    // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏
    for (const [ruleName, rule] of this.consistencyRules) {
      switch (ruleName) {
        case 'color_palette':
          if (brandProfile.colorPalette.length > 0) {
            consistentAnalysis.colorAnalysis.recommendedPalette = 
              rule.enforcer(analysis.colorAnalysis.recommendedPalette, brandProfile.colorPalette);
          }
          break;

        case 'style_modifiers':
          if (brandProfile.styleModifiers.length > 0) {
            consistentAnalysis.styleAnalysis.appliedModifiers = 
              rule.enforcer(analysis.styleAnalysis.appliedModifiers, brandProfile.styleModifiers);
          }
          break;

        case 'composition_principles':
          if (brandProfile.compositionPrinciples.length > 0) {
            consistentAnalysis.compositionAnalysis.layoutPrinciples = 
              rule.enforcer(analysis.compositionAnalysis.layoutPrinciples, brandProfile.compositionPrinciples);
          }
          break;
      }
    }

    return consistentAnalysis;
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –±—Ä–µ–Ω–¥–∞ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
   */
  updateBrandProfile(projectId, imageData) {
    if (!this.brandProfiles.has(projectId)) return;

    const profile = this.brandProfiles.get(projectId);
    profile.imageHistory.push({
      imageUrl: imageData.imageUrl,
      prompt: imageData.prompt,
      timestamp: Date.now(),
      analysis: imageData.analysis
    });

    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
    if (profile.imageHistory.length > 20) {
      profile.imageHistory = profile.imageHistory.slice(-10);
    }

    profile.updatedAt = Date.now();
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏
   */
  getConsistencyRecommendations(projectId) {
    if (!this.brandProfiles.has(projectId)) {
      return ['–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∏–ª—è –±—Ä–µ–Ω–¥–∞'];
    }

    const profile = this.brandProfiles.get(projectId);
    const recommendations = [];

    if (profile.colorPalette.length > 0) {
      recommendations.push(`–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–∏—Ä–º–µ–Ω–Ω—ã–µ —Ü–≤–µ—Ç–∞: ${profile.colorPalette.join(', ')}`);
    }

    if (profile.styleModifiers.length > 0) {
      recommendations.push('–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å—Ç–∏–ª—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è');
    }

    if (profile.imageHistory.length > 5) {
      recommendations.push('–£ –≤–∞—Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∏–ª—è');
    }

    return recommendations;
  }
}

/**
 * üéØ –ì–õ–ê–í–ù–´–ô –ò–ù–¢–ï–õ–õ–ï–ö–¢–£–ê–õ–¨–ù–´–ô –£–õ–£–ß–®–ê–¢–ï–õ–¨
 * –ö–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —É–ª—É—á—à–µ–Ω–∏—è Pollinations.ai
 */
class IntelligentPollinationsEnhancer {
  constructor() {
    this.styleAnalyzer = new StyleAnalyzer();
    this.colorSemantics = new ColorSemantics();
    this.compositionSemantics = new CompositionSemantics();
    this.intentionAnalyzer = new IntentionAnalyzer();
    this.styleTranslator = new StyleTranslator();
    this.qualityPredictor = new QualityPredictor();
    this.multiGenerator = new MultiGenerator();
    this.adaptiveParameters = new AdaptiveParameters();
    this.brandConsistency = new BrandConsistency();
    
    this.enhancementHistory = [];
    this.statistics = {
      totalEnhancements: 0,
      averageQualityImprovement: 0,
      successRate: 0
    };
  }

  /**
   * üöÄ –ì–õ–ê–í–ù–´–ô –ú–ï–¢–û–î: –ü–æ–ª–Ω–æ–µ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
   */
  async enhanceImageGeneration(prompt, context = {}) {
    const enhancementStartTime = Date.now();
    
    try {
      console.log(`üß† [ENHANCER] –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —É–ª—É—á—à–µ–Ω–∏—è –¥–ª—è: "${prompt.substring(0, 50)}..."`);

      // –≠—Ç–∞–ø 1: –ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞
      const analysis = await this.performDeepAnalysis(prompt, context);
      
      // –≠—Ç–∞–ø 2: –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –±—Ä–µ–Ω–¥–∏–Ω–≥–æ–≤–æ–π —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏
      const consistentAnalysis = this.applyBrandingConsistency(analysis, context);
      
      // –≠—Ç–∞–ø 3: –°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
      const optimizedPrompt = this.createOptimizedPrompt(prompt, consistentAnalysis);
      
      // –≠—Ç–∞–ø 4: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–¥–∞–ø—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
      const adaptiveParams = this.configureAdaptiveParameters(consistentAnalysis, context);
      
      // –≠—Ç–∞–ø 5: –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞
      const qualityPrediction = this.predictGenerationQuality(optimizedPrompt, consistentAnalysis);
      
      // –≠—Ç–∞–ø 6: –ú—É–ª—å—Ç–∏-–≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å –≤—ã–±–æ—Ä–æ–º –ª—É—á—à–µ–≥–æ
      const generationResult = await this.executeMultiGeneration(
        prompt, optimizedPrompt, adaptiveParams, context
      );
      
      // –≠—Ç–∞–ø 7: –ü–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è
      const finalResult = await this.postProcessAndValidate(generationResult, consistentAnalysis);
      
      const processingTime = Date.now() - enhancementStartTime;
      
      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –∏—Å—Ç–æ—Ä–∏–∏
      this.updateEnhancementHistory(prompt, finalResult, processingTime);
      
      const enhancementReport = {
        success: true,
        originalPrompt: prompt,
        enhancedPrompt: optimizedPrompt,
        analysis: consistentAnalysis,
        qualityPrediction,
        adaptiveParams,
        generationResult: finalResult,
        processingTime,
        
        // –ú–µ—Ç—Ä–∏–∫–∏ —É–ª—É—á—à–µ–Ω–∏—è
        improvementMetrics: this.calculateImprovementMetrics(analysis, finalResult),
        
        // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendations: this.generateEnhancementRecommendations(consistentAnalysis),
        
        // –û—Ç—á–µ—Ç –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–∏–∫–∞—Ö
        techniquesUsed: this.getUsedTechniques(consistentAnalysis)
      };
      
      console.log(`‚ú® [ENHANCER] –£–ª—É—á—à–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ ${processingTime}–º—Å`);
      console.log(`üéØ [ENHANCER] –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ: ${qualityPrediction.overallScore.toFixed(2)}/1.0`);
      
      return enhancementReport;
      
    } catch (error) {
      console.error(`‚ùå [ENHANCER] –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —É–ª—É—á—à–µ–Ω–∏—è:`, error);
      
      return {
        success: false,
        error: error.message,
        fallbackResult: await this.generateFallbackResult(prompt, context),
        processingTime: Date.now() - enhancementStartTime
      };
    }
  }

  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç –≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞
   */
  async performDeepAnalysis(prompt, context) {
    console.log(`üîç [ENHANCER] –í—ã–ø–æ–ª–Ω—è—é –≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞`);
    
    // –ê–Ω–∞–ª–∏–∑ –Ω–∞–º–µ—Ä–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const intentionAnalysis = this.intentionAnalyzer.analyzeIntention(prompt, context);
    
    // –ê–Ω–∞–ª–∏–∑ —Å—Ç–∏–ª—è
    const styleAnalysis = this.styleAnalyzer.analyzeStyle(prompt, context);
    
    // –¶–≤–µ—Ç–æ–≤–∞—è —Å–µ–º–∞–Ω—Ç–∏–∫–∞
    const colorAnalysis = this.colorSemantics.analyzeColorNeeds(
      prompt, styleAnalysis.detectedStyle, context.emotionalContext
    );
    
    // –ö–æ–º–ø–æ–∑–∏—Ü–∏–æ–Ω–Ω–∞—è —Å–µ–º–∞–Ω—Ç–∏–∫–∞
    const compositionAnalysis = this.compositionSemantics.analyzeComposition(
      prompt, styleAnalysis.detectedStyle, intentionAnalysis.primaryIntention
    );
    
    // –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –≤–∏–∑—É–∞–ª—å–Ω–æ–π —Å–µ–º–∞–Ω—Ç–∏–∫–æ–π
    let visualSemanticAnalysis = null;
    if (visualSemanticAnalyzer) {
      try {
        visualSemanticAnalysis = visualSemanticAnalyzer.analyzeVisualSemantics(prompt);
      } catch (e) {
        console.warn('‚ö†Ô∏è –í–∏–∑—É–∞–ª—å–Ω—ã–π —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
      }
    }
    
    const analysis = {
      intentionAnalysis,
      styleAnalysis,
      colorAnalysis,
      compositionAnalysis,
      visualSemanticAnalysis,
      
      // –ú–µ—Ç–∞-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
      analysisTimestamp: Date.now(),
      analysisConfidence: this.calculateOverallConfidence(
        intentionAnalysis, styleAnalysis, colorAnalysis, compositionAnalysis
      )
    };
    
    console.log(`‚úÖ [ENHANCER] –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω. –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${analysis.analysisConfidence.toFixed(2)}`);
    
    return analysis;
  }

  /**
   * –ü—Ä–∏–º–µ–Ω—è–µ—Ç –±—Ä–µ–Ω–¥–∏–Ω–≥–æ–≤—É—é —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å
   */
  applyBrandingConsistency(analysis, context) {
    if (!context.projectId) {
      return analysis; // –±–µ–∑ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ—Ç –±—Ä–µ–Ω–¥–∏–Ω–≥–æ–≤–æ–π —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏
    }
    
    console.log(`üè¢ [ENHANCER] –ü—Ä–∏–º–µ–Ω—è—é –±—Ä–µ–Ω–¥–∏–Ω–≥–æ–≤—É—é —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ ${context.projectId}`);
    
    return this.brandConsistency.applyBrandConsistency(context.projectId, analysis);
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç
   */
  createOptimizedPrompt(originalPrompt, analysis) {
    console.log(`üìù [ENHANCER] –°–æ–∑–¥–∞—é –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç`);
    
    const optimizedPrompt = this.styleTranslator.translatePrompt(
      originalPrompt,
      analysis.styleAnalysis.detectedStyle,
      analysis.intentionAnalysis,
      analysis.colorAnalysis,
      analysis.compositionAnalysis
    );
    
    console.log(`‚úÖ [ENHANCER] –ü—Ä–æ–º–ø—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω: "${optimizedPrompt.substring(0, 100)}..."`);
    
    return optimizedPrompt;
  }

  /**
   * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
   */
  configureAdaptiveParameters(analysis, context) {
    console.log(`üéõÔ∏è [ENHANCER] –ù–∞—Å—Ç—Ä–∞–∏–≤–∞—é –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã`);
    
    return this.adaptiveParameters.optimizeParameters(
      analysis.intentionAnalysis,
      analysis.styleAnalysis.detectedStyle,
      context
    );
  }

  /**
   * –ü—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
   */
  predictGenerationQuality(optimizedPrompt, analysis) {
    console.log(`üîÆ [ENHANCER] –ü—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞—é –∫–∞—á–µ—Å—Ç–≤–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏`);
    
    return this.qualityPredictor.predictQuality(
      optimizedPrompt,
      analysis.styleAnalysis.detectedStyle,
      analysis.intentionAnalysis,
      analysis.colorAnalysis,
      analysis.compositionAnalysis
    );
  }

  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç –º—É–ª—å—Ç–∏-–≥–µ–Ω–µ—Ä–∞—Ü–∏—é
   */
  async executeMultiGeneration(originalPrompt, optimizedPrompt, adaptiveParams, context) {
    console.log(`üîÑ [ENHANCER] –í—ã–ø–æ–ª–Ω—è—é –º—É–ª—å—Ç–∏-–≥–µ–Ω–µ—Ä–∞—Ü–∏—é`);
    
    const shouldUseMultiGeneration = context.prioritizeQuality || 
                                   adaptiveParams.quality === 'ultra' ||
                                   context.allowMultipleVariants;
    
    if (shouldUseMultiGeneration && !context.prioritizeSpeed) {
      // –ú—É–ª—å—Ç–∏-–≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å –≤—ã–±–æ—Ä–æ–º –ª—É—á—à–µ–≥–æ
      const variants = await this.multiGenerator.generateMultipleVariants(
        originalPrompt, optimizedPrompt, adaptiveParams.quality
      );
      
      const selection = this.multiGenerator.selectBestVariant(variants, {
        preferConservative: context.preferConservative,
        preferCreative: context.preferCreative,
        allowHighRisk: context.allowHighRisk
      });
      
      return {
        type: 'multi_generation',
        selectedVariant: selection.bestVariant,
        allVariants: selection.allVariants,
        selectionReasoning: selection.selectionReasoning,
        imageUrl: selection.bestVariant.imageUrl
      };
    } else {
      // –û–±—ã—á–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
      const { generateWithPollinations } = require('./ai-image-generator.js');
      const imageId = `enhanced_${Date.now()}`;
      const imageUrl = await generateWithPollinations(optimizedPrompt, imageId, adaptiveParams.quality);
      
      return {
        type: 'single_generation',
        imageUrl,
        prompt: optimizedPrompt,
        parameters: adaptiveParams
      };
    }
  }

  /**
   * –ü–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è
   */
  async postProcessAndValidate(generationResult, analysis) {
    console.log(`üîß [ENHANCER] –í—ã–ø–æ–ª–Ω—è—é –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫—É`);
    
    // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–∞–∫ –µ—Å—Ç—å
    // –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å AI-–∞–ø—Å–∫–µ–π–ª–∏–Ω–≥ –∏ —É–ª—É—á—à–µ–Ω–∏–µ
    
    const finalResult = {
      ...generationResult,
      validated: true,
      postProcessed: false, // –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ
      qualityScore: this.estimateImageQuality(generationResult, analysis)
    };
    
    return finalResult;
  }

  /**
   * –û—Ü–µ–Ω–∏–≤–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
   */
  estimateImageQuality(generationResult, analysis) {
    // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–∏–∫
    let qualityScore = 0.6; // –±–∞–∑–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
    
    if (generationResult.type === 'multi_generation') {
      qualityScore += 0.2; // –±–æ–Ω—É—Å –∑–∞ –º—É–ª—å—Ç–∏-–≥–µ–Ω–µ—Ä–∞—Ü–∏—é
    }
    
    if (analysis.analysisConfidence > 0.8) {
      qualityScore += 0.1; // –±–æ–Ω—É—Å –∑–∞ –≤—ã—Å–æ–∫—É—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –∞–Ω–∞–ª–∏–∑–∞
    }
    
    if (analysis.styleAnalysis.confidence > 0.7) {
      qualityScore += 0.1; // –±–æ–Ω—É—Å –∑–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Å—Ç–∏–ª—å
    }
    
    return Math.min(1.0, qualityScore);
  }

  /**
   * –í—ã—á–∏—Å–ª—è–µ—Ç –æ–±—â—É—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –∞–Ω–∞–ª–∏–∑–∞
   */
  calculateOverallConfidence(intentionAnalysis, styleAnalysis, colorAnalysis, compositionAnalysis) {
    const confidences = [
      intentionAnalysis.confidence,
      styleAnalysis.confidence,
      0.7, // —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è —Ü–≤–µ—Ç–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
      0.6  // —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è –∫–æ–º–ø–æ–∑–∏—Ü–∏–æ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    ];
    
    return confidences.reduce((sum, conf) => sum + conf, 0) / confidences.length;
  }

  /**
   * –í—ã—á–∏—Å–ª—è–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ —É–ª—É—á—à–µ–Ω–∏—è
   */
  calculateImprovementMetrics(analysis, finalResult) {
    return {
      promptEnhancement: {
        originalLength: analysis.originalPrompt?.length || 0,
        enhancedLength: finalResult.prompt?.length || 0,
        modifiersAdded: analysis.styleAnalysis.appliedModifiers.length
      },
      qualityPrediction: {
        predictedScore: analysis.qualityPrediction?.overallScore || 0.5,
        actualScore: finalResult.qualityScore || 0.5
      },
      technicalOptimization: {
        parametersOptimized: true,
        multiGenerationUsed: finalResult.type === 'multi_generation',
        brandConsistencyApplied: !!analysis.brandConsistency
      }
    };
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é
   */
  generateEnhancementRecommendations(analysis) {
    const recommendations = [];
    
    if (analysis.analysisConfidence < 0.7) {
      recommendations.push('–î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π –≤ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ª—É—á—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞');
    }
    
    if (analysis.styleAnalysis.confidence < 0.6) {
      recommendations.push('–£—Ç–æ—á–Ω–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π —Å—Ç–∏–ª—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
    }
    
    if (analysis.colorAnalysis.recommendedPalette.length === 0) {
      recommendations.push('–£–∫–∞–∂–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–µ —Ü–≤–µ—Ç–∞');
    }
    
    if (!analysis.visualSemanticAnalysis) {
      recommendations.push('–í–∏–∑—É–∞–ª—å–Ω—ã–π —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é');
    }
    
    return recommendations;
  }

  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏
   */
  getUsedTechniques(analysis) {
    const techniques = [];
    
    techniques.push('–ê–Ω–∞–ª–∏–∑ –Ω–∞–º–µ—Ä–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    techniques.push('–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∏–ª—è');
    techniques.push('–¶–≤–µ—Ç–æ–≤–∞—è —Å–µ–º–∞–Ω—Ç–∏–∫–∞');
    techniques.push('–ö–æ–º–ø–æ–∑–∏—Ü–∏–æ–Ω–Ω–∞—è —Å–µ–º–∞–Ω—Ç–∏–∫–∞');
    techniques.push('–ü—Ä–æ–º–ø—Ç-–∏–Ω–∂–∏–Ω–∏—Ä–∏–Ω–≥');
    techniques.push('–ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã');
    
    if (analysis.visualSemanticAnalysis) {
      techniques.push('–í–∏–∑—É–∞–ª—å–Ω—ã–π —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑');
    }
    
    return techniques;
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —É–ª—É—á—à–µ–Ω–∏–π
   */
  updateEnhancementHistory(prompt, result, processingTime) {
    this.enhancementHistory.push({
      prompt: prompt.substring(0, 100),
      success: result.success || true,
      processingTime,
      qualityScore: result.qualityScore || 0.5,
      timestamp: Date.now()
    });
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
    if (this.enhancementHistory.length > 100) {
      this.enhancementHistory = this.enhancementHistory.slice(-50);
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    this.updateStatistics();
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã
   */
  updateStatistics() {
    this.statistics.totalEnhancements = this.enhancementHistory.length;
    
    if (this.enhancementHistory.length > 0) {
      this.statistics.averageQualityImprovement = 
        this.enhancementHistory.reduce((sum, item) => sum + item.qualityScore, 0) / 
        this.enhancementHistory.length;
      
      this.statistics.successRate = 
        this.enhancementHistory.filter(item => item.success).length / 
        this.enhancementHistory.length;
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
   */
  async generateFallbackResult(prompt, context) {
    console.log(`üîÑ [ENHANCER] –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ä–µ–∑–µ—Ä–≤–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç`);
    
    try {
      const { generateWithPollinations } = require('./ai-image-generator.js');
      const fallbackId = `fallback_${Date.now()}`;
      const imageUrl = await generateWithPollinations(prompt, fallbackId, 'standard');
      
      return {
        type: 'fallback',
        imageUrl,
        prompt,
        message: '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –±–∞–∑–æ–≤—ã–π —Ä–µ–∂–∏–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏'
      };
    } catch (error) {
      return {
        type: 'error',
        message: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ',
        error: error.message
      };
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã
   */
  getSystemStatistics() {
    return {
      ...this.statistics,
      historySize: this.enhancementHistory.length,
      componentsStatus: {
        styleAnalyzer: 'active',
        colorSemantics: 'active',
        compositionSemantics: 'active',
        intentionAnalyzer: 'active',
        styleTranslator: 'active',
        qualityPredictor: 'active',
        multiGenerator: 'active',
        adaptiveParameters: 'active',
        brandConsistency: 'active',
        visualSemanticAnalyzer: visualSemanticAnalyzer ? 'active' : 'unavailable'
      }
    };
  }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —É–ª—É—á—à–∞—Ç–µ–ª—è
const intelligentPollinationsEnhancer = new IntelligentPollinationsEnhancer();

module.exports = {
  // –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ —É–ª—É—á—à–µ–Ω–∏—è
  enhanceImageGeneration: intelligentPollinationsEnhancer.enhanceImageGeneration.bind(intelligentPollinationsEnhancer),
  
  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  getSystemStatistics: intelligentPollinationsEnhancer.getSystemStatistics.bind(intelligentPollinationsEnhancer),
  
  // –î–æ—Å—Ç—É–ø –∫ –æ—Ç–¥–µ–ª—å–Ω—ã–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º
  components: {
    styleAnalyzer: intelligentPollinationsEnhancer.styleAnalyzer,
    colorSemantics: intelligentPollinationsEnhancer.colorSemantics,
    compositionSemantics: intelligentPollinationsEnhancer.compositionSemantics,
    intentionAnalyzer: intelligentPollinationsEnhancer.intentionAnalyzer,
    styleTranslator: intelligentPollinationsEnhancer.styleTranslator,
    qualityPredictor: intelligentPollinationsEnhancer.qualityPredictor,
    multiGenerator: intelligentPollinationsEnhancer.multiGenerator,
    adaptiveParameters: intelligentPollinationsEnhancer.adaptiveParameters,
    brandConsistency: intelligentPollinationsEnhancer.brandConsistency
  },
  
  // –ö–ª–∞—Å—Å—ã –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
  IntelligentPollinationsEnhancer,
  StyleAnalyzer,
  ColorSemantics,
  CompositionSemantics,
  IntentionAnalyzer,
  StyleTranslator,
  QualityPredictor,
  MultiGenerator,
  AdaptiveParameters,
  BrandConsistency
};
