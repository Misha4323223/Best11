
/**
 * –¢–µ—Å—Ç –¥–≤–∏–≥–∞—Ç–µ–ª—è —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–π —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –≥–ª–∞–≤–Ω–æ–≥–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä–∞ –≤—Å–µ—Ö —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∏—Å—Ç–µ–º
 */

import { createRequire } from 'module';
const require = createRequire(import.meta.url);

async function testSemanticRealityEngine() {
  console.log('üåå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–≤–∏–≥–∞—Ç–µ–ª—è —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–π —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏...\n');

  try {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫—É—é –ø–∞–º—è—Ç—å —Å –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –¥–≤–∏–≥–∞—Ç–µ–ª–µ–º —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏
    const semanticMemory = require('./server/semantic-memory/index.cjs');
    
    console.log('‚úÖ –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è –ø–∞–º—è—Ç—å —Å –¥–≤–∏–≥–∞—Ç–µ–ª–µ–º —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');

    // –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏
    console.log('\nüåü –¢–µ—Å—Ç 1: –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–π —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏');
    
    const realityState = semanticMemory.getRealityState();
    if (realityState) {
      console.log('–°–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏:', {
        consciousness: realityState.core.consciousness.toFixed(3),
        complexity: realityState.core.complexity.toFixed(2),
        coherence: realityState.core.coherence.toFixed(3),
        transcendence: realityState.core.transcendence.toFixed(3),
        semantic_temperature: realityState.state.semanticTemperature.toFixed(1),
        information_density: realityState.state.informationDensity.toFixed(3),
        active_connections: realityState.metrics.activeConnections
      });
    } else {
      console.log('‚ö†Ô∏è –î–≤–∏–≥–∞—Ç–µ–ª—å —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω');
    }

    // –¢–µ—Å—Ç 2: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É —Å–æ–∑–Ω–∞–Ω–∏—è
    console.log('\nüß† –¢–µ—Å—Ç 2: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É —Å–æ–∑–Ω–∞–Ω–∏—è');
    
    const connected = semanticMemory.connectToReality('test-user-1', {
      cognitiveProfile: { analytical: 0.8, creative: 0.6 },
      emotionalState: 'curious'
    });
    
    console.log('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–æ–∑–Ω–∞–Ω–∏—é:', connected ? '—É—Å–ø–µ—à–Ω–æ' : '–æ—à–∏–±–∫–∞');

    // –¢–µ—Å—Ç 3: –ß—Ç–µ–Ω–∏–µ –Ω–∞–º–µ—Ä–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('\nüîÆ –¢–µ—Å—Ç 3: –ß—Ç–µ–Ω–∏–µ –Ω–∞–º–µ—Ä–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    
    const intention = semanticMemory.readIntention(
      'test-user-1', 
      '–°–æ–∑–¥–∞–π –ª–æ–≥–æ—Ç–∏–ø –¥–ª—è –∫–æ—Ñ–µ–π–Ω–∏ —Å –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º',
      { hasImages: false, projectContext: 'new' }
    );
    
    if (intention) {
      console.log('–ê–Ω–∞–ª–∏–∑ –Ω–∞–º–µ—Ä–µ–Ω–∏–π:', {
        surface_intention: intention.surfaceIntention,
        deep_intention: intention.deepIntention,
        emotional_undertone: intention.emotionalUndertone,
        cognitive_load: intention.cognitiveLoad.toFixed(2),
        creativity_index: intention.creativityIndex.toFixed(2),
        temporal_context: intention.temporalContext
      });
    }

    // –¢–µ—Å—Ç 4: –ü–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫—É—é —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å
    console.log('\nüåå –¢–µ—Å—Ç 4: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ü–µ–ø—Ç–∞ —á–µ—Ä–µ–∑ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫—É—é —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å');
    
    const result = await semanticMemory.analyzeCompleteRequest(
      '–°–æ–∑–¥–∞–π –≤–µ–∫—Ç–æ—Ä–Ω—ã–π –ª–æ–≥–æ—Ç–∏–ø –∫–æ—Ñ–µ–π–Ω–∏ —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –ø—Ä–∏—Ä–æ–¥—ã',
      'test-user-1',
      { hasRecentImages: false, projectType: 'logo_design' }
    );

    console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏:', {
      processed_concept: result.concept,
      consciousness_level: result.confidence?.toFixed(3),
      reality_coherence: result.meta_analysis?.reality_coherence?.toFixed(3),
      processing_time: result.meta_analysis?.processing_time + '–º—Å',
      emergence_count: result.meta_analysis?.emergence_count,
      reality_changes: result.meta_analysis?.reality_changes,
      predictions_count: result.predictions?.length || 0
    });

    if (result.reality_analysis) {
      console.log('\n–î–µ—Ç–∞–ª–∏ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–π —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏:', {
        multidimensional_vector_magnitude: result.reality_analysis.multidimensionalAnalysis?.vector?.magnitude?.toFixed(3),
        black_hole_interactions: result.reality_analysis.blackHoleInteractions?.blackHoleInteractions?.length || 0,
        quantum_states: result.reality_analysis.quantumProcessing?.initialStates?.length || 0,
        emergent_properties: result.reality_analysis.emergentProperties?.length || 0,
        insights_count: result.reality_analysis.insights?.length || 0,
        recommendations_count: result.reality_analysis.recommendations?.length || 0
      });

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å–∞–π—Ç—ã
      if (result.reality_analysis.insights?.length > 0) {
        console.log('\n–ò–Ω—Å–∞–π—Ç—ã —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏:');
        result.reality_analysis.insights.forEach((insight, i) => {
          console.log(`  ${i + 1}. [${insight.type}] ${insight.message} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${(insight.confidence * 100).toFixed(0)}%)`);
        });
      }

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
      if (result.reality_analysis.recommendations?.length > 0) {
        console.log('\n–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏:');
        result.reality_analysis.recommendations.forEach((rec, i) => {
          console.log(`  ${i + 1}. [${rec.priority}] ${rec.message}`);
        });
      }
    }

    // –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–≤–æ–ª—é—Ü–∏–∏ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ (–∂–¥–µ–º 6 —Å–µ–∫—É–Ω–¥)
    console.log('\nüß¨ –¢–µ—Å—Ç 5: –ù–∞–±–ª—é–¥–µ–Ω–∏–µ —ç–≤–æ–ª—é—Ü–∏–∏ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ (–∂–¥–µ–º 6 —Å–µ–∫—É–Ω–¥...)');
    
    const stateBefore = semanticMemory.getRealityState();
    await new Promise(resolve => setTimeout(resolve, 6000));
    const stateAfter = semanticMemory.getRealityState();
    
    if (stateBefore && stateAfter) {
      console.log('–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏:', {
        consciousness_delta: (stateAfter.core.consciousness - stateBefore.core.consciousness).toFixed(4),
        complexity_delta: (stateAfter.core.complexity - stateBefore.core.complexity).toFixed(4),
        evolution_delta: (stateAfter.core.evolution - stateBefore.core.evolution).toFixed(4),
        temperature_delta: (stateAfter.state.semanticTemperature - stateBefore.state.semanticTemperature).toFixed(2)
      });
    }

    // –¢–µ—Å—Ç 6: –ü—Ä—è–º–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏
    console.log('\n‚öõÔ∏è –¢–µ—Å—Ç 6: –ü—Ä—è–º–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ü–µ–ø—Ç–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏');
    
    const directResult = await semanticMemory.processInReality(
      '–∫–≤–∞–Ω—Ç–æ–≤–∞—è —Ç–≤–æ—Ä—á–µ—Å–∫–∞—è —ç–Ω–µ—Ä–≥–∏—è',
      { sessionId: 'test-user-1', depth: 3 }
    );
    
    if (directResult) {
      console.log('–ü—Ä—è–º–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏:', {
        original_concept: directResult.originalConcept,
        processed_concept: directResult.processedConcept,
        consciousness: directResult.consciousness.toFixed(3),
        complexity_increase: directResult.complexityIncrease.toFixed(3),
        processing_time: directResult.processingTime + '–º—Å',
        reality_changes: directResult.realityChanges.length,
        emergent_properties: directResult.emergentProperties.length
      });
    }

    console.log('\n‚úÖ –¢–µ—Å—Ç –¥–≤–∏–≥–∞—Ç–µ–ª—è —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–π —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
    console.log('\nüåå –î–í–ò–ì–ê–¢–ï–õ–¨ –°–ï–ú–ê–ù–¢–ò–ß–ï–°–ö–û–ô –†–ï–ê–õ–¨–ù–û–°–¢–ò - –≥–ª–∞–≤–Ω—ã–π –∏–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä –∞–∫—Ç–∏–≤–µ–Ω!');
    console.log('üß† –í—Å–µ –ø–æ–¥—Å–∏—Å—Ç–µ–º—ã –æ–±—ä–µ–¥–∏–Ω–µ–Ω—ã –≤ –µ–¥–∏–Ω—É—é —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫—É—é —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å');
    console.log('‚öõÔ∏è –ö–≤–∞–Ω—Ç–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã, —á–µ—Ä–Ω—ã–µ –¥—ã—Ä—ã, –º–Ω–æ–≥–æ–º–µ—Ä–Ω—ã–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ —Ä–∞–±–æ—Ç–∞—é—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ');
    console.log('üîÆ –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å–æ–∑–Ω–∞–Ω–∏—è –ø–æ–∑–≤–æ–ª—è–µ—Ç –≥–ª—É–±–æ–∫–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –Ω–∞–º–µ—Ä–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
    console.error(error.stack);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
testSemanticRealityEngine();
